name: Release

permissions:
  contents: write

on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]*"]

env:
  CARGO_TERM_COLOR: always
  RUSTC_FORCE_INCREMENTAL: 1
  RUST_BACKTRACE: full
  RUSTFLAGS: -D warnings

jobs:
  dist:
    name: dist (${{ matrix.target }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            code-target: win32-x64
          - os: windows-2022
            target: aarch64-pc-windows-msvc
            code-target: win32-arm64
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            code-target: linux-x64
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            code-target: linux-arm64
          - os: macos-11
            target: x86_64-apple-darwin
            code-target: darwin-x64
          - os: macos-11
            target: aarch64-apple-darwin
            code-target: darwin-arm64

    env:
      RA_TARGET: ${{ matrix.target }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - run: rustup toolchain install stable --profile minimal

      - uses: Swatinem/rust-cache@v2

      - name: Update apt repositories
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get update

      - name: Install target toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get install gcc-aarch64-linux-gnu

      - name: Build Binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          if [ "${{ matrix.os }}" = "wwindows-2022" ]; then
            cp "target/${{ matrix.target }}/release/bigquery-functions.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/bigquery-functions" "dist/"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: dist-${{ matrix.target }}
          path: ./dist

  publish:
    name: Publish
    needs: [dist]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: false

      - uses: actions/download-artifact@v2

      - name: Calculate tag name
        id: tagname
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo TAG=$name >> $GITHUB_ENV

      - name: Build archive
        shell: bash
        run: |
          set -ex
          rm -rf tmp
          mkdir tmp
          mkdir dist
          for dir in bins-* ; do
              platform=${dir#"bins-"}
              unset exe
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              pkgname=$PROJECT_NAME-$TAG-$platform
              mkdir tmp/$pkgname
              # cp LICENSE README.md tmp/$pkgname
              mv bins-$platform/$BIN_NAME$exe tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME$exe
              if [ "$exe" = "" ]; then
                  tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              else
                  (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              fi
          done
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ env.TAG }}
          overwrite: true
