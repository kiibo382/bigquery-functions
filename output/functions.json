[
  {
    "name": "ANY_VALUE",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "Any",
    "description": "Returns expression for some row chosen from the group. Which row is chosen is\nnondeterministic, not random. Returns NULL when the input produces no\nrows. Returns NULL when expression is NULL for all rows in the group.ANY_VALUE behaves as if RESPECT NULLS is specified;\nrows for which expression is NULL are considered and may be selected.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "ARRAY_AGG",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "All data types except ARRAY.",
    "description": "Returns an ARRAY of expression values.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls.An error is raised if an array in the final query result contains a NULL\nelement."
  },
  {
    "name": "ARRAY_CONCAT_AGG",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "ARRAY",
    "description": "Concatenates elements from expression of type ARRAY, returning a single\narray as a result.This function ignores NULL input arrays, but respects the NULL elements in\nnon-NULL input arrays. An\nerror is raised, however, if an array in the final query result contains a\nNULL element. Returns NULL if there are zero input rows or\nexpression evaluates to NULL for all rows.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls."
  },
  {
    "name": "AVG",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "Any numeric input type, such as\nINT64. Note that, for\nfloating point input types, the return result is non-deterministic, which\nmeans you might receive a different result each time you use this function.",
    "description": "Returns the average of non-NULL input values, or NaN if the input contains a\nNaN.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "BIT_AND",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "INT64",
    "description": "Performs a bitwise AND operation on expression and returns the result.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls."
  },
  {
    "name": "BIT_OR",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "INT64",
    "description": "Performs a bitwise OR operation on expression and returns the result.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls."
  },
  {
    "name": "BIT_XOR",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "INT64",
    "description": "Performs a bitwise XOR operation on expression and returns the result.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls."
  },
  {
    "name": "COUNT",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "expression can be any data type. If\nDISTINCT is present, expression can only be a data type that is\ngroupable.",
    "description": "Returns the number of rows in the input.\nReturns the number of rows with expression evaluated to any value other\nthan NULL.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls.This function with DISTINCT supports specifying collation."
  },
  {
    "name": "COUNTIF",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "BOOL",
    "description": "Returns the count of TRUE values for expression. Returns 0 if there are\nzero input rows, or if expression evaluates to FALSE or NULL for all rows.Since expression must be a BOOL, the form COUNTIF(DISTINCT ...)\nis not supported. This would not be useful: there is only one distinct value of\nTRUE.\nUsually when someone wants to combine COUNTIF and DISTINCT, they\nwant to count the number of distinct values of an expression for which a certain\ncondition is satisfied. One recipe to achieve this is the following:COUNT(DISTINCT IF(condition, expression, NULL))Note that this uses COUNT, not COUNTIF; the IF part has been moved inside.\nTo learn more, see the examples for COUNT.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "LOGICAL_AND",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "BOOL",
    "description": "Returns the logical AND of all non-NULL expressions. Returns NULL if there\nare zero input rows or expression evaluates to NULL for all rows.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls."
  },
  {
    "name": "LOGICAL_OR",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "BOOL",
    "description": "Returns the logical OR of all non-NULL expressions. Returns NULL if there\nare zero input rows or expression evaluates to NULL for all rows.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls."
  },
  {
    "name": "MAX",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "Any orderable data type.",
    "description": "Returns the maximum value of non-NULL expressions. Returns NULL if there\nare zero input rows or expression evaluates to NULL for all rows.\nReturns NaN if the input contains a NaN.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls.This function supports specifying collation."
  },
  {
    "name": "MIN",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "Any orderable data type.",
    "description": "Returns the minimum value of non-NULL expressions. Returns NULL if there\nare zero input rows or expression evaluates to NULL for all rows.\nReturns NaN if the input contains a NaN.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls.This function supports specifying collation."
  },
  {
    "name": "STRING_AGG",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "Either STRING or BYTES.",
    "description": "Returns a value (either STRING or BYTES) obtained by concatenating\nnon-NULL values. Returns NULL if there are zero input rows or expression\nevaluates to NULL for all rows.If a delimiter is specified, concatenated values are separated by that\ndelimiter; otherwise, a comma is used as a delimiter.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "SUM",
    "arguments": [],
    "category": "Aggregate functions",
    "return_type": "Any supported numeric data types and INTERVAL.",
    "description": "Returns the sum of non-null values.If the expression is a floating point value, the sum is non-deterministic, which\nmeans you might receive a different result each time you use this function.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "CORR",
    "arguments": [],
    "category": "Statistical aggregate functions",
    "return_type": "FLOAT64",
    "description": "Returns the Pearson coefficient\nof correlation of a set of number pairs. For each number pair, the first number\nis the dependent variable and the second number is the independent variable.\nThe return result is between -1 and 1. A result of 0 indicates no\ncorrelation.All numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.This function ignores any input pairs that contain one or more NULL values. If\nthere are fewer than two input pairs without NULL values, this function returns\nNULL.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "COVAR_POP",
    "arguments": [],
    "category": "Statistical aggregate functions",
    "return_type": "FLOAT64",
    "description": "Returns the population covariance of\na set of number pairs. The first number is the dependent variable; the second\nnumber is the independent variable. The return result is between -Inf and\n+Inf.All numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.This function ignores any input pairs that contain one or more NULL values. If\nthere is no input pair without NULL values, this function returns NULL. If there\nis exactly one input pair without NULL values, this function returns 0.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "COVAR_SAMP",
    "arguments": [],
    "category": "Statistical aggregate functions",
    "return_type": "FLOAT64",
    "description": "Returns the sample covariance of a\nset of number pairs. The first number is the dependent variable; the second\nnumber is the independent variable. The return result is between -Inf and\n+Inf.All numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.This function ignores any input pairs that contain one or more NULL values. If\nthere are fewer than two input pairs without NULL values, this function returns\nNULL.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "STDDEV_POP",
    "arguments": [],
    "category": "Statistical aggregate functions",
    "return_type": "FLOAT64",
    "description": "Returns the population (biased) standard deviation of the values. The return\nresult is between 0 and +Inf.All numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.This function ignores any NULL inputs. If all inputs are ignored, this function\nreturns NULL.If this function receives a single non-NULL input, it returns 0.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "STDDEV_SAMP",
    "arguments": [],
    "category": "Statistical aggregate functions",
    "return_type": "FLOAT64",
    "description": "Returns the sample (unbiased) standard deviation of the values. The return\nresult is between 0 and +Inf.All numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.This function ignores any NULL inputs. If there are fewer than two non-NULL\ninputs, this function returns NULL.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "VAR_POP",
    "arguments": [],
    "category": "Statistical aggregate functions",
    "return_type": "FLOAT64",
    "description": "Returns the population (biased) variance of the values. The return result is\nbetween 0 and +Inf.All numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.This function ignores any NULL inputs. If all inputs are ignored, this function\nreturns NULL.If this function receives a single non-NULL input, it returns 0.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "VAR_SAMP",
    "arguments": [],
    "category": "Statistical aggregate functions",
    "return_type": "FLOAT64",
    "description": "Returns the sample (unbiased) variance of the values. The return result is\nbetween 0 and +Inf.All numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.This function ignores any NULL inputs. If there are fewer than two non-NULL\ninputs, this function returns NULL.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "APPROX_COUNT_DISTINCT",
    "arguments": [],
    "category": "Approximate aggregate functions",
    "return_type": "Any data type except:ARRAY\nSTRUCT\nINTERVAL",
    "description": "Returns the approximate result for COUNT(DISTINCT expression). The value\nreturned is a statistical estimate, not necessarily the actual value.This function is less accurate than COUNT(DISTINCT expression), but performs\nbetter on huge input."
  },
  {
    "name": "APPROX_QUANTILES",
    "arguments": [],
    "category": "Approximate aggregate functions",
    "return_type": "expression: Any supported data type except:\n\nARRAY\nSTRUCT\nINTERVAL\nnumber: INT64 literal or query parameter.",
    "description": "Returns the approximate boundaries for a group of expression values, where\nnumber represents the number of quantiles to create. This function returns\nan array of number + 1 elements, where the first element is the approximate\nminimum and the last element is the approximate maximum.Returns NULL if there are zero input rows or expression evaluates to\nNULL for all rows.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls."
  },
  {
    "name": "APPROX_TOP_COUNT",
    "arguments": [],
    "category": "Approximate aggregate functions",
    "return_type": "expression: Any data type that the GROUP BY clause supports.\nnumber: INT64 literal or query parameter.",
    "description": "Returns the approximate top elements of expression as an array of STRUCTs.\nThe number parameter specifies the number of elements returned.Each STRUCT contains two fields. The first field (named value) contains an\ninput value. The second field (named count) contains an INT64 specifying the\nnumber of times the value was returned.Returns NULL if there are zero input rows.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls."
  },
  {
    "name": "APPROX_TOP_SUM",
    "arguments": [],
    "category": "Approximate aggregate functions",
    "return_type": "expression: Any data type that the GROUP BY clause supports.\nweight: One of the following:\n\nINT64\nNUMERIC\nBIGNUMERIC\nFLOAT64\nnumber: INT64 literal or query parameter.",
    "description": "Returns the approximate top elements of expression, based on the sum of an\nassigned weight. The number parameter specifies the number of elements\nreturned.If the weight input is negative or NaN, this function returns an error.The elements are returned as an array of STRUCTs.\nEach STRUCT contains two fields: value and sum.\nThe value field contains the value of the input expression. The sum field is\nthe same type as weight, and is the approximate sum of the input weight\nassociated with the value field.Returns NULL if there are zero input rows.To learn more about the optional arguments in this function and how to use them,\nsee Aggregate function calls."
  },
  {
    "name": "HLL_COUNT.INIT",
    "arguments": [],
    "category": "HyperLogLog++ functions",
    "return_type": "INT64\nNUMERIC\nBIGNUMERIC\nSTRING\nBYTES",
    "description": "An aggregate function that takes one or more input values and aggregates them\ninto a HLL++ sketch. Each sketch\nis represented using the BYTES data type. You can then merge sketches using\nHLL_COUNT.MERGE or HLL_COUNT.MERGE_PARTIAL. If no merging is needed,\nyou can extract the final count of distinct values from the sketch using\nHLL_COUNT.EXTRACT.This function supports an optional parameter, precision. This parameter\ndefines the accuracy of the estimate at the cost of additional memory required\nto process the sketches or store them on disk. The range for this value is\n10 to 24. The default value is 15. For more information about precision,\nsee Precision for sketches.If the input is NULL, this function returns NULL.For more information, see HyperLogLog in Practice: Algorithmic Engineering of\na State of The Art Cardinality Estimation Algorithm."
  },
  {
    "name": "HLL_COUNT.MERGE",
    "arguments": [],
    "category": "HyperLogLog++ functions",
    "return_type": "BYTES",
    "description": "An aggregate function that returns the cardinality of several\nHLL++ set sketches by computing their union.Each sketch must be initialized on the same type. Attempts to merge sketches\nfor different types results in an error. For example, you cannot merge a sketch\ninitialized from INT64 data with one initialized from STRING data.If the merged sketches were initialized with different precisions, the precision\nwill be downgraded to the lowest precision involved in the merge.This function ignores NULL values when merging sketches. If the merge happens\nover zero rows or only over NULL values, the function returns 0."
  },
  {
    "name": "HLL_COUNT.MERGE_PARTIAL",
    "arguments": [],
    "category": "HyperLogLog++ functions",
    "return_type": "BYTES",
    "description": "An aggregate function that takes one or more\nHLL++ sketch\ninputs and merges them into a new sketch.Each sketch must be initialized on the same type. Attempts to merge sketches\nfor different types results in an error. For example, you cannot merge a sketch\ninitialized from INT64 data with one initialized from STRING data.If the merged sketches were initialized with different precisions, the precision\nwill be downgraded to the lowest precision involved in the merge. For example,\nif MERGE_PARTIAL encounters sketches of precision 14 and 15, the returned new\nsketch will have precision 14.This function returns NULL if there is no input or all inputs are NULL."
  },
  {
    "name": "HLL_COUNT.EXTRACT",
    "arguments": [],
    "category": "HyperLogLog++ functions",
    "return_type": "BYTES",
    "description": "A scalar function that extracts a cardinality estimate of a single\nHLL++ sketch.If sketch is NULL, this function returns a cardinality estimate of 0."
  },
  {
    "name": "RANK",
    "arguments": [],
    "category": "Numbering functions",
    "return_type": "INT64",
    "description": "Returns the ordinal (1-based) rank of each row within the ordered partition.\nAll peer rows receive the same rank value. The next row or set of peer rows\nreceives a rank value which increments by the number of peers with the previous\nrank value, instead of DENSE_RANK, which always increments by 1.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "DENSE_RANK",
    "arguments": [],
    "category": "Numbering functions",
    "return_type": "INT64",
    "description": "Returns the ordinal (1-based) rank of each row within the window partition.\nAll peer rows receive the same rank value, and the subsequent rank value is\nincremented by one.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "PERCENT_RANK",
    "arguments": [],
    "category": "Numbering functions",
    "return_type": "FLOAT64",
    "description": "Return the percentile rank of a row defined as (RK-1)/(NR-1), where RK is\nthe RANK of the row and NR is the number of rows in the partition.\nReturns 0 if NR=1.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "CUME_DIST",
    "arguments": [],
    "category": "Numbering functions",
    "return_type": "FLOAT64",
    "description": "Return the relative rank of a row defined as NP/NR. NP is defined to be the\nnumber of rows that either precede or are peers with the current row. NR is the\nnumber of rows in the partition.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "NTILE",
    "arguments": [],
    "category": "Numbering functions",
    "return_type": "INT64",
    "description": "This function divides the rows into constant_integer_expression\nbuckets based on row ordering and returns the 1-based bucket number that is\nassigned to each row. The number of rows in the buckets can differ by at most 1.\nThe remainder values (the remainder of number of rows divided by buckets) are\ndistributed one for each bucket, starting with bucket 1. If\nconstant_integer_expression evaluates to NULL, 0 or negative, an\nerror is provided.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "ROW_NUMBER",
    "arguments": [],
    "category": "Numbering functions",
    "return_type": "INT64",
    "description": "Does not require the ORDER BY clause. Returns the sequential\nrow ordinal (1-based) of each row for each ordered partition. If the\nORDER BY clause is unspecified then the result is\nnon-deterministic.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "BIT_COUNT",
    "arguments": [],
    "category": "Bit functions",
    "return_type": "INT64",
    "description": "The input, expression, must be an\ninteger or BYTES.Returns the number of bits that are set in the input expression.\nFor signed integers, this is the number of bits in two's complement form."
  },
  {
    "name": "PARSE_BIGNUMERIC",
    "arguments": [],
    "category": "Conversion functions",
    "return_type": "BIGNUMERIC",
    "description": "Converts a string to a BIGNUMERIC value.The numeric literal contained in the string must not exceed the maximum\nprecision or range of the BIGNUMERIC type, or an error\noccurs. If the number of digits after the decimal point exceeds 38, then the\nresulting BIGNUMERIC value rounds\nhalf away from zero to have 38 digits after the\ndecimal point.-- This example shows how a string with a decimal point is parsed.\nSELECT PARSE_BIGNUMERIC(\"123.45\") AS parsed\n\n+--------+\n| parsed |\n+--------+\n| 123.45 |\n+--------+\n\n-- This example shows how a string with an exponent is parsed.\nSELECT PARSE_BIGNUMERIC(\"123.456E37\") AS parsed\n\n+-----------------------------------------+\n| parsed                                  |\n+-----------------------------------------+\n| 123400000000000000000000000000000000000 |\n+-----------------------------------------+\n\n-- This example shows the rounding when digits after the decimal point exceeds 38.\nSELECT PARSE_BIGNUMERIC(\"1.123456789012345678901234567890123456789\") as parsed\n\n+------------------------------------------+\n| parsed                                   |\n+------------------------------------------+\n| 1.12345678901234567890123456789012345679 |\n+------------------------------------------+This funcion is similar to using the CAST AS BIGNUMERIC\nfunction except that the PARSE_BIGNUMERIC function only accepts string inputs\nand allows the following in the string:Spaces between the sign (+/-) and the number\nSigns (+/-) after the numberRules for valid input strings:Rule\n      Example Input\n      Output\n  The string can only contain digits, commas, decimal points and signs.\n      \"- 12,34567,89.0\"\n      -123456789\n    Whitepaces are allowed anywhere except between digits.\n      \"  -  12.345  \"\n      -12.345\n    Only digits and commas are allowed before the decimal point.\n      \" 12,345,678\"\n      12345678\n    Only digits are allowed after the decimal point.\n      \"1.234 \"\n      1.234\n    Use E or e for exponents. After the e,\n        digits and a leading sign indicator are allowed.\n      \" 123.45e-1\"\n      12.345\n    If the integer part is not empty, then it must contain at least one digit.\n      \" 0,.12 -\"\n      -0.12\n    If the string contains a decimal point, then it must contain at least one digit.\n      \" .1\"\n      0.1\n    The string cannot contain more than one sign.\n      \" 0.5 +\"\n      0.5"
  },
  {
    "name": "PARSE_NUMERIC",
    "arguments": [],
    "category": "Conversion functions",
    "return_type": "NUMERIC",
    "description": "Converts a string to a NUMERIC value.The numeric literal contained in the string must not exceed the maximum\nprecision or range of the NUMERIC type, or an error\noccurs. If the number of digits after the decimal point exceeds nine, then the\nresulting NUMERIC value rounds\nhalf away from zero to have nine digits after the\ndecimal point.-- This example shows how a string with a decimal point is parsed.\nSELECT PARSE_NUMERIC(\"123.45\") AS parsed\n\n+--------+\n| parsed |\n+--------+\n| 123.45 |\n+--------+\n\n-- This example shows how a string with an exponent is parsed.\nSELECT PARSE_NUMERIC(\"12.34E27\") as parsed\n\n+-------------------------------+\n| parsed                        |\n+-------------------------------+\n| 12340000000000000000000000000 |\n+-------------------------------+\n\n-- This example shows the rounding when digits after the decimal point exceeds 9.\nSELECT PARSE_NUMERIC(\"1.0123456789\") as parsed\n\n+-------------+\n| parsed      |\n+-------------+\n| 1.012345679 |\n+-------------+This function is similar to using the CAST AS NUMERIC function\nexcept that the PARSE_NUMERIC function only accepts string inputs and allows\nthe following in the string:Spaces between the sign (+/-) and the number\nSigns (+/-) after the numberRules for valid input strings:Rule\n      Example Input\n      Output\n  The string can only contain digits, commas, decimal points and signs.\n      \"- 12,34567,89.0\"\n      -123456789\n    Whitepaces are allowed anywhere except between digits.\n      \"  -  12.345  \"\n      -12.345\n    Only digits and commas are allowed before the decimal point.\n      \" 12,345,678\"\n      12345678\n    Only digits are allowed after the decimal point.\n      \"1.234 \"\n      1.234\n    Use E or e for exponents. After the e,\n        digits and a leading sign indicator are allowed.\n      \" 123.45e-1\"\n      12.345\n    If the integer part is not empty, then it must contain at least one digit.\n      \" 0,.12 -\"\n      -0.12\n    If the string contains a decimal point, then it must contain at least one digit.\n      \" .1\"\n      0.1\n    The string cannot contain more than one sign.\n      \" 0.5 +\"\n      0.5"
  },
  {
    "name": "ABS",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64\nOUTPUTINT64NUMERICBIGNUMERICFLOAT64",
    "description": "Computes absolute value. Returns an error if the argument is an integer and the\noutput value cannot be represented as the same type; this happens only for the\nlargest negative input value, which has no positive representation.X\n      ABS(X)\n    25\n      25\n    -25\n      25\n    +inf\n      +inf\n    -inf\n      +inf"
  },
  {
    "name": "SIGN",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64\nOUTPUTINT64NUMERICBIGNUMERICFLOAT64",
    "description": "Returns -1, 0, or +1 for negative, zero and positive arguments\nrespectively. For floating point arguments, this function does not distinguish\nbetween positive and negative zero.X\n      SIGN(X)\n    25\n      +1\n    0\n      0\n    -25\n      -1\n    NaN\n      NaN"
  },
  {
    "name": "SQRT",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64\nOUTPUTFLOAT64NUMERICBIGNUMERICFLOAT64",
    "description": "Computes the square root of X. Generates an error if X is less than 0.X\n      SQRT(X)\n    25.0\n      5.0\n    +inf\n      +inf\n    X < 0\n      Error"
  },
  {
    "name": "POW",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "The return data type is determined by the argument types with the following\ntable.INPUTINT64NUMERICBIGNUMERICFLOAT64\nINT64FLOAT64NUMERICBIGNUMERICFLOAT64\n\nNUMERICNUMERICNUMERICBIGNUMERICFLOAT64\nBIGNUMERICBIGNUMERICBIGNUMERICBIGNUMERICFLOAT64\n\nFLOAT64FLOAT64FLOAT64FLOAT64FLOAT64",
    "description": "Returns the value of X raised to the power of Y. If the result underflows and is\nnot representable, then the function returns a  value of zero.X\n      Y\n      POW(X, Y)\n  2.0\n      3.0\n      8.0\n    1.0\n      Any value including NaN\n      1.0\n    Any value including NaN\n      0\n      1.0\n    -1.0\n      +inf\n      1.0\n    -1.0\n      -inf\n      1.0\n    ABS(X) < 1\n      -inf\n      +inf\n    ABS(X) > 1\n      -inf\n      0.0\n    ABS(X) < 1\n      +inf\n      0.0\n    ABS(X) > 1\n      +inf\n      +inf\n    -inf\n      Y < 0\n      0.0\n    -inf\n      Y > 0\n      -inf if Y is an odd integer, +inf otherwise\n    +inf\n      Y < 0\n      0\n    +inf\n      Y > 0\n      +inf\n    Finite value < 0\n      Non-integer\n      Error\n    0\n      Finite value < 0\n      Error"
  },
  {
    "name": "EXP",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64\nOUTPUTFLOAT64NUMERICBIGNUMERICFLOAT64",
    "description": "Computes e to the power of X, also called the natural exponential function. If\nthe result underflows, this function returns a zero. Generates an error if the\nresult overflows.X\n      EXP(X)\n    0.0\n      1.0\n    +inf\n      +inf\n    -inf\n      0.0"
  },
  {
    "name": "LN",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64\nOUTPUTFLOAT64NUMERICBIGNUMERICFLOAT64",
    "description": "Computes the natural logarithm of X. Generates an error if X is less than or\nequal to zero.X\n      LN(X)\n    1.0\n      0.0\n    +inf\n      +inf\n    X < 0\n      Error"
  },
  {
    "name": "LOG",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64\nINT64FLOAT64NUMERICBIGNUMERICFLOAT64\n\nNUMERICNUMERICNUMERICBIGNUMERICFLOAT64\nBIGNUMERICBIGNUMERICBIGNUMERICBIGNUMERICFLOAT64\n\nFLOAT64FLOAT64FLOAT64FLOAT64FLOAT64",
    "description": "If only X is present, LOG is a synonym of LN. If Y is also present,\nLOG computes the logarithm of X to base Y.X\n      Y\n      LOG(X, Y)\n  100.0\n      10.0\n      2.0\n    -inf\n      Any value\n      NaN\n    Any value\n      +inf\n      NaN\n    +inf\n      0.0 < Y < 1.0\n      -inf\n    +inf\n      Y > 1.0\n      +inf\n    X <= 0\n      Any value\n      Error\n    Any value\n      Y <= 0\n      Error\n    Any value\n      1.0\n      Error"
  },
  {
    "name": "LOG10",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64\nOUTPUTFLOAT64NUMERICBIGNUMERICFLOAT64",
    "description": "Similar to LOG, but computes logarithm to base 10.X\n      LOG10(X)\n  100.0\n      2.0\n    -inf\n      NaN\n    +inf\n      NaN\n    X <= 0\n      Error"
  },
  {
    "name": "GREATEST",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "Data type of the input values.",
    "description": "Returns the greatest value among X1,...,XN. If any argument is NULL, returns\nNULL. Otherwise, in the case of floating-point arguments, if any argument is\nNaN, returns NaN. In all other cases, returns the value among X1,...,XN\nthat has the greatest value according to the ordering used by the ORDER BY\nclause. The arguments X1, ..., XN must be coercible to a common supertype, and\nthe supertype must support ordering.X1,...,XN\n      GREATEST(X1,...,XN)\n    3,5,1\n      5This function supports specifying collation."
  },
  {
    "name": "LEAST",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "Data type of the input values.",
    "description": "Returns the least value among X1,...,XN. If any argument is NULL, returns\nNULL. Otherwise, in the case of floating-point arguments, if any argument is\nNaN, returns NaN. In all other cases, returns the value among X1,...,XN\nthat has the least value according to the ordering used by the ORDER BY\nclause. The arguments X1, ..., XN must be coercible to a common supertype, and\nthe supertype must support ordering.X1,...,XN\n      LEAST(X1,...,XN)\n    3,5,1\n      1This function supports specifying collation."
  },
  {
    "name": "DIV",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "The return data type is determined by the argument types with the following\ntable.INPUTINT64NUMERICBIGNUMERIC\nINT64INT64NUMERICBIGNUMERIC\n\nNUMERICNUMERICNUMERICBIGNUMERIC\nBIGNUMERICBIGNUMERICBIGNUMERICBIGNUMERIC",
    "description": "Returns the result of integer division of X by Y. Division by zero returns\nan error. Division by -1 may overflow.X\n      Y\n      DIV(X, Y)\n  20\n      4\n      5\n    12\n      -7\n      -1\n    20\n      3\n      6\n    0\n      20\n      0\n    20\n      0\n      Error"
  },
  {
    "name": "SAFE_DIVIDE",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64INT64FLOAT64NUMERICBIGNUMERICFLOAT64NUMERICNUMERICNUMERICBIGNUMERICFLOAT64BIGNUMERICBIGNUMERICBIGNUMERICBIGNUMERICFLOAT64FLOAT64FLOAT64FLOAT64FLOAT64FLOAT64",
    "description": "Equivalent to the division operator (X / Y), but returns\nNULL if an error occurs, such as a division by zero error.XYSAFE_DIVIDE(X, Y)20450200200NULL"
  },
  {
    "name": "SAFE_MULTIPLY",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64INT64INT64NUMERICBIGNUMERICFLOAT64NUMERICNUMERICNUMERICBIGNUMERICFLOAT64BIGNUMERICBIGNUMERICBIGNUMERICBIGNUMERICFLOAT64FLOAT64FLOAT64FLOAT64FLOAT64FLOAT64",
    "description": "Equivalent to the multiplication operator (*), but returns\nNULL if overflow occurs.XYSAFE_MULTIPLY(X, Y)20480"
  },
  {
    "name": "SAFE_NEGATE",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64OUTPUTINT64NUMERICBIGNUMERICFLOAT64",
    "description": "Equivalent to the unary minus operator (-), but returns\nNULL if overflow occurs.XSAFE_NEGATE(X)+1-1-1+100"
  },
  {
    "name": "SAFE_ADD",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64INT64INT64NUMERICBIGNUMERICFLOAT64NUMERICNUMERICNUMERICBIGNUMERICFLOAT64BIGNUMERICBIGNUMERICBIGNUMERICBIGNUMERICFLOAT64FLOAT64FLOAT64FLOAT64FLOAT64FLOAT64",
    "description": "Equivalent to the addition operator (+), but returns\nNULL if overflow occurs.XYSAFE_ADD(X, Y)549"
  },
  {
    "name": "SAFE_SUBTRACT",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64INT64INT64NUMERICBIGNUMERICFLOAT64NUMERICNUMERICNUMERICBIGNUMERICFLOAT64BIGNUMERICBIGNUMERICBIGNUMERICBIGNUMERICFLOAT64FLOAT64FLOAT64FLOAT64FLOAT64FLOAT64",
    "description": "Returns the result of Y subtracted from X.\nEquivalent to the subtraction operator (-), but returns\nNULL if overflow occurs.XYSAFE_SUBTRACT(X, Y)541"
  },
  {
    "name": "MOD",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "The return data type is determined by the argument types with the following\ntable.INPUTINT64NUMERICBIGNUMERIC\nINT64INT64NUMERICBIGNUMERIC\n\nNUMERICNUMERICNUMERICBIGNUMERIC\nBIGNUMERICBIGNUMERICBIGNUMERICBIGNUMERIC",
    "description": "Modulo function: returns the remainder of the division of X by Y. Returned\nvalue has the same sign as X. An error is generated if Y is 0.X\n      Y\n      MOD(X, Y)\n  25\n      12\n      1\n    25\n      0\n      Error"
  },
  {
    "name": "ROUND",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64\nOUTPUTFLOAT64NUMERICBIGNUMERICFLOAT64",
    "description": "If only X is present, rounds X to the nearest integer. If N is present,\nrounds X to N decimal places after the decimal point. If N is negative,\nrounds off digits to the left of the decimal point. Rounds halfway cases\naway from zero. Generates an error if overflow occurs.If X is a NUMERIC or BIGNUMERIC type, then you can\nexplicitly set rounding_mode to one of the following:\"ROUND_HALF_AWAY_FROM_ZERO\": (Default) Rounds\nhalfway cases away from zero.\n\"ROUND_HALF_EVEN\": Rounds halfway cases\ntowards the nearest even digit.If you set the rounding_mode and X is not a NUMERIC or BIGNUMERIC type,\nthen the function generates an error.Expression\n      Return Value\n  ROUND(2.0)\n      2.0\n    ROUND(2.3)\n      2.0\n    ROUND(2.8)\n      3.0\n    ROUND(2.5)\n      3.0\n    ROUND(-2.3)\n      -2.0\n    ROUND(-2.8)\n      -3.0\n    ROUND(-2.5)\n      -3.0\n    ROUND(0)\n      0\n    ROUND(+inf)\n      +inf\n    ROUND(-inf)\n      -inf\n    ROUND(NaN)\n      NaN\n    ROUND(123.7, -1)\n      120.0\n    ROUND(1.235, 2)\n      1.24\n    ROUND(NUMERIC \"2.25\", 1, \"ROUND_HALF_EVEN\")\n      2.2\n    ROUND(NUMERIC \"2.35\", 1, \"ROUND_HALF_EVEN\")\n      2.4\n    ROUND(NUMERIC \"2.251\", 1, \"ROUND_HALF_EVEN\")\n      2.3\n    ROUND(NUMERIC \"-2.5\", 0, \"ROUND_HALF_EVEN\")\n      -2\n    ROUND(NUMERIC \"2.5\", 0, \"ROUND_HALF_AWAY_FROM_ZERO\")\n      3\n    ROUND(NUMERIC \"-2.5\", 0, \"ROUND_HALF_AWAY_FROM_ZERO\")\n      -3"
  },
  {
    "name": "TRUNC",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64\nOUTPUTFLOAT64NUMERICBIGNUMERICFLOAT64",
    "description": "If only X is present, TRUNC rounds X to the nearest integer whose absolute\nvalue is not greater than the absolute value of X. If N is also present, TRUNC\nbehaves like ROUND(X, N), but always rounds towards zero and never overflows.X\n      TRUNC(X)\n  2.0\n      2.0\n    2.3\n      2.0\n    2.8\n      2.0\n    2.5\n      2.0\n    -2.3\n      -2.0\n    -2.8\n      -2.0\n    -2.5\n      -2.0\n    0\n      0\n    +inf\n      +inf\n    -inf\n      -inf\n    NaN\n      NaN"
  },
  {
    "name": "CEIL",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64\nOUTPUTFLOAT64NUMERICBIGNUMERICFLOAT64",
    "description": "Returns the smallest integral value that is not less than X.X\n      CEIL(X)\n  2.0\n      2.0\n    2.3\n      3.0\n    2.8\n      3.0\n    2.5\n      3.0\n    -2.3\n      -2.0\n    -2.8\n      -2.0\n    -2.5\n      -2.0\n    0\n      0\n    +inf\n      +inf\n    -inf\n      -inf\n    NaN\n      NaN"
  },
  {
    "name": "FLOOR",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "INPUTINT64NUMERICBIGNUMERICFLOAT64\nOUTPUTFLOAT64NUMERICBIGNUMERICFLOAT64",
    "description": "Returns the largest integral value that is not greater than X.X\n      FLOOR(X)\n  2.0\n      2.0\n    2.3\n      2.0\n    2.8\n      2.0\n    2.5\n      2.0\n    -2.3\n      -3.0\n    -2.8\n      -3.0\n    -2.5\n      -3.0\n    0\n      0\n    +inf\n      +inf\n    -inf\n      -inf\n    NaN\n      NaN"
  },
  {
    "name": "COT",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "FLOAT64",
    "description": "Computes the cotangent for the angle of X, where X is specified in radians.\nX can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.X\n      COT(X)\n    +inf\n      NaN\n    -inf\n      NaN\n    NaN\n      NaN\n    0\n      Error\n    NULL\n      NULL"
  },
  {
    "name": "COTH",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "FLOAT64",
    "description": "Computes the hyperbolic cotangent for the angle of X, where X is specified\nin radians. X can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.X\n      COTH(X)\n    +inf\n      1\n    -inf\n      -1\n    NaN\n      NaN\n    0\n      Error\n    NULL\n      NULL"
  },
  {
    "name": "CSC",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "FLOAT64",
    "description": "Computes the cosecant of the input angle, which is in radians.\nX can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.X\n      CSC(X)\n    +inf\n      NaN\n    -inf\n      NaN\n    NaN\n      NaN\n    0\n      Error\n    NULL\n      NULL"
  },
  {
    "name": "CSCH",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "FLOAT64",
    "description": "Computes the hyperbolic cosecant of the input angle, which is in radians.\nX can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.X\n      CSCH(X)\n    +inf\n      0\n    -inf\n      0\n    NaN\n      NaN\n    0\n      Error\n    NULL\n      NULL"
  },
  {
    "name": "SEC",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "FLOAT64",
    "description": "Computes the secant for the angle of X, where X is specified in radians.\nX can be any data type\nthat coerces to FLOAT64.X\n      SEC(X)\n    +inf\n      NaN\n    -inf\n      NaN\n    NaN\n      NaN\n    NULL\n      NULL"
  },
  {
    "name": "SECH",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "FLOAT64",
    "description": "Computes the hyperbolic secant for the angle of X, where X is specified\nin radians. X can be any data type\nthat coerces to FLOAT64.\nNever produces an error.X\n      SECH(X)\n    +inf\n      0\n    -inf\n      0\n    NaN\n      NaN\n    NULL\n      NULL"
  },
  {
    "name": "CBRT",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "FLOAT64",
    "description": "Computes the cube root of X. X can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.X\n      CBRT(X)\n    +inf\n      inf\n    -inf\n      -inf\n    NaN\n      NaN\n    0\n      0\n    NULL\n      NULL"
  },
  {
    "name": "RANGE_BUCKET",
    "arguments": [],
    "category": "Mathematical functions",
    "return_type": "point: A generic value.\nboundaries_array: A generic array of values.Note:The data type for point and the element type of boundaries_array\nmust be equivalent. The data type must be comparable.",
    "description": "RANGE_BUCKET scans through a sorted array and returns the 0-based position\nof the point's upper bound. This can be useful if you need to group your data to\nbuild partitions, histograms, business-defined rules, and more.RANGE_BUCKET follows these rules:If the point exists in the array, returns the index of the next larger value.\nRANGE_BUCKET(20, [0, 10, 20, 30, 40]) -- 3 is return value\nRANGE_BUCKET(20, [0, 10, 20, 20, 40, 40]) -- 4 is return value\nIf the point does not exist in the array, but it falls between two values,\nreturns the index of the larger value.\nRANGE_BUCKET(25, [0, 10, 20, 30, 40]) -- 3 is return value\nIf the point is smaller than the first value in the array, returns 0.\nRANGE_BUCKET(-10, [5, 10, 20, 30, 40]) -- 0 is return value\nIf the point is greater than or equal to the last value in the array,\nreturns the length of the array.\nRANGE_BUCKET(80, [0, 10, 20, 30, 40]) -- 5 is return value\nIf the array is empty, returns 0.\nRANGE_BUCKET(80, []) -- 0 is return value\nIf the point is NULL or NaN, returns NULL.\nRANGE_BUCKET(NULL, [0, 10, 20, 30, 40]) -- NULL is return value\nThe data type for the point and array must be compatible.\nRANGE_BUCKET('a', ['a', 'b', 'c', 'd']) -- 1 is return value\nRANGE_BUCKET(1.2, [1, 1.2, 1.4, 1.6]) -- 2 is return value\nRANGE_BUCKET(1.2, [1, 2, 4, 6]) -- execution failureExecution failure occurs when:The array has a NaN or NULL value in it.\nRANGE_BUCKET(80, [NULL, 10, 20, 30, 40]) -- execution failure\nThe array is not sorted in ascending order.\nRANGE_BUCKET(30, [10, 30, 20, 40, 50]) -- execution failure"
  },
  {
    "name": "FIRST_VALUE",
    "arguments": [],
    "category": "Navigation functions",
    "return_type": "value_expression can be any data type that an expression can return.",
    "description": "Returns the value of the value_expression for the first row in the current\nwindow frame.This function includes NULL values in the calculation unless IGNORE NULLS is\npresent. If IGNORE NULLS is present, the function excludes NULL values from\nthe calculation.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "LAST_VALUE",
    "arguments": [],
    "category": "Navigation functions",
    "return_type": "value_expression can be any data type that an expression can return.",
    "description": "Returns the value of the value_expression for the last row in the current\nwindow frame.This function includes NULL values in the calculation unless IGNORE NULLS is\npresent. If IGNORE NULLS is present, the function excludes NULL values from\nthe calculation.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "NTH_VALUE",
    "arguments": [],
    "category": "Navigation functions",
    "return_type": "value_expression can be any data type that can be returned from an\nexpression.\nconstant_integer_expression can be any constant expression that returns an\ninteger.",
    "description": "Returns the value of value_expression at the Nth row of the current window\nframe, where Nth is defined by constant_integer_expression. Returns NULL if\nthere is no such row.This function includes NULL values in the calculation unless IGNORE NULLS is\npresent. If IGNORE NULLS is present, the function excludes NULL values from\nthe calculation.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "LEAD",
    "arguments": [],
    "category": "Navigation functions",
    "return_type": "value_expression can be any data type that can be returned from an\nexpression.\noffset must be a non-negative integer literal or parameter.\ndefault_expression must be compatible with the value expression type.",
    "description": "Returns the value of the value_expression on a subsequent row. Changing the\noffset value changes which subsequent row is returned; the default value is\n1, indicating the next row in the window frame. An error occurs if offset is\nNULL or a negative value.The optional default_expression is used if there isn't a row in the window\nframe at the specified offset. This expression must be a constant expression and\nits type must be implicitly coercible to the type of value_expression. If left\nunspecified, default_expression defaults to NULL.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "LAG",
    "arguments": [],
    "category": "Navigation functions",
    "return_type": "value_expression can be any data type that can be returned from an\nexpression.\noffset must be a non-negative integer literal or parameter.\ndefault_expression must be compatible with the value expression type.",
    "description": "Returns the value of the value_expression on a preceding row. Changing the\noffset value changes which preceding row is returned; the default value is\n1, indicating the previous row in the window frame. An error occurs if\noffset is NULL or a negative value.The optional default_expression is used if there isn't a row in the window\nframe at the specified offset. This expression must be a constant expression and\nits type must be implicitly coercible to the type of value_expression. If left\nunspecified, default_expression defaults to NULL.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "PERCENTILE_CONT",
    "arguments": [],
    "category": "Navigation functions",
    "return_type": "value_expression and percentile must have one of the following types:\nNUMERIC\nBIGNUMERIC\nFLOAT64\npercentile must be a literal in the range [0, 1].",
    "description": "Computes the specified percentile value for the value_expression, with linear\ninterpolation.This function ignores NULL\nvalues if\nRESPECT NULLS is absent.  If RESPECT NULLS is present:Interpolation between two NULL values returns NULL.\nInterpolation between a NULL value and a non-NULL value returns the\nnon-NULL value.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "PERCENTILE_DISC",
    "arguments": [],
    "category": "Navigation functions",
    "return_type": "value_expression can be any orderable type.\npercentile must be a literal in the range [0, 1], with one of the\nfollowing types:\nNUMERIC\nBIGNUMERIC\nFLOAT64",
    "description": "Computes the specified percentile value for a discrete value_expression. The\nreturned value is the first sorted value of value_expression with cumulative\ndistribution greater than or equal to the given percentile value.This function ignores NULL\nvalues unless\nRESPECT NULLS is present.To learn more about the OVER clause and how to use it, see\nWindow function calls."
  },
  {
    "name": "FARM_FINGERPRINT",
    "arguments": [],
    "category": "Hash functions",
    "return_type": "INT64",
    "description": "Computes the fingerprint of the STRING or BYTES input using the\nFingerprint64 function from the\nopen-source FarmHash library. The output\nof this function for a particular input will never change."
  },
  {
    "name": "MD5",
    "arguments": [],
    "category": "Hash functions",
    "return_type": "BYTES",
    "description": "Computes the hash of the input using the\nMD5 algorithm. The input can either be\nSTRING or BYTES. The string version treats the input as an array of bytes.This function returns 16 bytes."
  },
  {
    "name": "SHA1",
    "arguments": [],
    "category": "Hash functions",
    "return_type": "BYTES",
    "description": "Computes the hash of the input using the\nSHA-1 algorithm. The input can either be\nSTRING or BYTES. The string version treats the input as an array of bytes.This function returns 20 bytes."
  },
  {
    "name": "SHA256",
    "arguments": [],
    "category": "Hash functions",
    "return_type": "BYTES",
    "description": "Computes the hash of the input using the\nSHA-256 algorithm. The input can either be\nSTRING or BYTES. The string version treats the input as an array of bytes.This function returns 32 bytes."
  },
  {
    "name": "SHA512",
    "arguments": [],
    "category": "Hash functions",
    "return_type": "BYTES",
    "description": "Computes the hash of the input using the\nSHA-512 algorithm. The input can either be\nSTRING or BYTES. The string version treats the input as an array of bytes.This function returns 64 bytes."
  },
  {
    "name": "ASCII",
    "arguments": [],
    "category": "String functions",
    "return_type": "INT64",
    "description": "Returns the ASCII code for the first character or byte in value. Returns\n0 if value is empty or the ASCII code is 0 for the first character\nor byte."
  },
  {
    "name": "BYTE_LENGTH",
    "arguments": [],
    "category": "String functions",
    "return_type": "INT64",
    "description": "Returns the length of the STRING or BYTES value in BYTES,\nregardless of whether the type of the value is STRING or BYTES."
  },
  {
    "name": "CHAR_LENGTH",
    "arguments": [],
    "category": "String functions",
    "return_type": "INT64",
    "description": "Returns the length of the STRING in characters."
  },
  {
    "name": "CHARACTER_LENGTH",
    "arguments": [],
    "category": "String functions",
    "return_type": "INT64",
    "description": "Synonym for CHAR_LENGTH."
  },
  {
    "name": "CHR",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING",
    "description": "Takes a Unicode code point and returns\nthe character that matches the code point. Each valid code point should fall\nwithin the range of [0, 0xD7FF] and [0xE000, 0x10FFFF]. Returns an empty string\nif the code point is 0. If an invalid Unicode code point is specified, an\nerror is returned.To work with an array of Unicode code points, see\nCODE_POINTS_TO_STRING"
  },
  {
    "name": "CODE_POINTS_TO_BYTES",
    "arguments": [],
    "category": "String functions",
    "return_type": "BYTES",
    "description": "Takes an array of extended ASCII\ncode points\n(ARRAY of INT64) and returns BYTES.To convert from BYTES to an array of code points, see\nTO_CODE_POINTS."
  },
  {
    "name": "CODE_POINTS_TO_STRING",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING",
    "description": "Takes an array of Unicode code points\n(ARRAY of INT64) and returns a STRING.To convert from a string to an array of code points, see\nTO_CODE_POINTS."
  },
  {
    "name": "COLLATE",
    "arguments": [],
    "category": "String functions",
    "return_type": "In this example, the weight of a is less than the weight of Z. This\nis because the collate specification, und:ci assigns more weight to Z.WITH Words AS (\n  SELECT\n    COLLATE('a', 'und:ci') AS char1,\n    COLLATE('Z', 'und:ci') AS char2\n)\nSELECT ( Words.char1 < Words.char2 ) AS a_less_than_Z\nFROM Words;\n\n+----------------+\n| a_less_than_Z  |\n+----------------+\n| TRUE           |\n+----------------+In this example, the weight of a is greater than the weight of Z. This\nis because the default collate specification assigns more weight to a.WITH Words AS (\n  SELECT\n    'a' AS char1,\n    'Z' AS char2\n)\nSELECT ( Words.char1 < Words.char2 ) AS a_less_than_Z\nFROM Words;\n\n+----------------+\n| a_less_than_Z  |\n+----------------+\n| FALSE          |\n+----------------+",
    "description": "STRING"
  },
  {
    "name": "CONCAT",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Concatenates one or more values into a single result. All values must be\nBYTES or data types that can be cast to STRING.The function returns NULL if any input argument is NULL.Note:You can also use the\n|| concatenation operator to concatenate\nvalues into a string."
  },
  {
    "name": "CONTAINS_SUBSTR",
    "arguments": [],
    "category": "String functions",
    "return_type": "BOOL",
    "description": "Performs a normalized, case-insensitive search to see if a value exists in an\nexpression. Returns TRUE if the value exists, otherwise returns FALSE.The search value must be a STRING literal, but not the literal NULL.The expression can be a column or table reference. A table reference is\nevaluated as a STRUCT whose fields are the columns of the table. A\ncolumn reference is evaluated as one the following data types:STRING\nINT64\nBOOL\nNUMERIC\nBIGNUMERIC\nTIMESTAMP\nTIME\nDATE\nDATETIME\nARRAY\nSTRUCTWhen the expression is evaluated, the result is cast to a STRING, and then\nthe function looks for the search value in the result. If the search value is\nNULL, an error is thrown. If the expression is NULL, the return value is\nNULL.You can perform a cross-field search on an expression that evaluates to a\nSTRUCT or ARRAY. If the expression evaluates to a STRUCT, the cross-field\nsearch is recursive and includes all subfields inside the STRUCT.In a cross-field search, each field and subfield is individually converted to\na string and searched for the value. The function returns TRUE if at least one\nfield includes the search value; otherwise, if at least one field is NULL, it\nreturns NULL; otherwise, if the search value is not found and all fields are\nnon-NULL, it returns FALSE.Before values are compared, they are normalized and case folded with\nNFKC normalization. Wildcard searches are\nnot supported."
  },
  {
    "name": "ENDS_WITH",
    "arguments": [],
    "category": "String functions",
    "return_type": "BOOL",
    "description": "Takes two STRING or BYTES values. Returns TRUE if the second\nvalue is a suffix of the first.This function supports specifying collation."
  },
  {
    "name": "FORMAT",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING",
    "description": "FORMAT formats a data type expression as a string.format_string_expression: Can contain zero or more\nformat specifiers. Each format specifier is introduced\nby the % symbol, and must map to one or more of the remaining arguments.\nIn general, this is a one-to-one mapping, except when the * specifier is\npresent. For example, %.*i maps to two arguments—a length argument\nand a signed integer argument.  If the number of arguments related to the\nformat specifiers is not the same as the number of arguments, an error occurs.\ndata_type_expression: The value to format as a string. This can be any\nBigQuery data type."
  },
  {
    "name": "FROM_BASE32",
    "arguments": [],
    "category": "String functions",
    "return_type": "BYTES",
    "description": "Converts the base32-encoded input string_expr into BYTES format. To convert\nBYTES to a base32-encoded STRING, use TO_BASE32."
  },
  {
    "name": "FROM_BASE64",
    "arguments": [],
    "category": "String functions",
    "return_type": "BYTES",
    "description": "Converts the base64-encoded input string_expr into\nBYTES format. To convert\nBYTES to a base64-encoded STRING,\nuse TO_BASE64.There are several base64 encodings in common use that vary in exactly which\nalphabet of 65 ASCII characters are used to encode the 64 digits and padding.\nSee RFC 4648 for details. This\nfunction expects the alphabet [A-Za-z0-9+/=]."
  },
  {
    "name": "FROM_HEX",
    "arguments": [],
    "category": "String functions",
    "return_type": "BYTES",
    "description": "Converts a hexadecimal-encoded STRING into BYTES format. Returns an error\nif the input STRING contains characters outside the range\n(0..9, A..F, a..f). The lettercase of the characters does not matter. If the\ninput STRING has an odd number of characters, the function acts as if the\ninput has an additional leading 0. To convert BYTES to a hexadecimal-encoded\nSTRING, use TO_HEX."
  },
  {
    "name": "INITCAP",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING",
    "description": "Takes a STRING and returns it with the first character in each word in\nuppercase and all other characters in lowercase. Non-alphabetic characters\nremain the same.delimiters is an optional string argument that is used to override the default\nset of characters used to separate words. If delimiters is not specified, it\ndefaults to the following characters: \n<whitespace> [ ] ( ) { } / | \\ < > ! ? @ \" ^ # $ & ~ _ , . : ; * % + -If value or delimiters is NULL, the function returns NULL."
  },
  {
    "name": "INSTR",
    "arguments": [],
    "category": "String functions",
    "return_type": "INT64",
    "description": "Returns the lowest 1-based index of search_value in source_value. 0 is\nreturned when no match is found. source_value and search_value must be the\nsame type, either STRING or BYTES.If position is specified, the search starts at this position in\nsource_value, otherwise it starts at the beginning of source_value. If\nposition is negative, the function searches backwards from the end of\nsource_value, with -1 indicating the last character. position cannot be 0.If occurrence is specified, the search returns the position of a specific\ninstance of search_value in source_value, otherwise it returns the index of\nthe first occurrence. If occurrence is greater than the number of matches\nfound, 0 is returned. For occurrence > 1, the function searches for\noverlapping occurrences, in other words, the function searches for additional\noccurrences beginning with the second character in the previous occurrence.\noccurrence cannot be 0 or negative.This function supports specifying collation."
  },
  {
    "name": "LEFT",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Returns a STRING or BYTES value that consists of the specified\nnumber of leftmost characters or bytes from value. The length is an\nINT64 that specifies the length of the returned\nvalue. If value is of type BYTES, length is the number of leftmost bytes\nto return. If value is STRING, length is the number of leftmost characters\nto return.If length is 0, an empty STRING or BYTES value will be\nreturned. If length is negative, an error will be returned. If length\nexceeds the number of characters or bytes from value, the original value\nwill be returned."
  },
  {
    "name": "LENGTH",
    "arguments": [],
    "category": "String functions",
    "return_type": "INT64",
    "description": "Returns the length of the STRING or BYTES value. The returned\nvalue is in characters for STRING arguments and in bytes for the BYTES\nargument."
  },
  {
    "name": "LPAD",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Returns a STRING or BYTES value that consists of original_value prepended\nwith pattern. The return_length is an INT64 that\nspecifies the length of the returned value. If original_value is of type\nBYTES, return_length is the number of bytes. If original_value is\nof type STRING, return_length is the number of characters.The default value of pattern is a blank space.Both original_value and pattern must be the same data type.If return_length is less than or equal to the original_value length, this\nfunction returns the original_value value, truncated to the value of\nreturn_length. For example, LPAD('hello world', 7); returns 'hello w'.If original_value, return_length, or pattern is NULL, this function\nreturns NULL.This function returns an error if:return_length is negative\npattern is empty"
  },
  {
    "name": "LOWER",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "For STRING arguments, returns the original string with all alphabetic\ncharacters in lowercase. Mapping between lowercase and uppercase is done\naccording to the\nUnicode Character Database\nwithout taking into account language-specific mappings.For BYTES arguments, the argument is treated as ASCII text, with all bytes\ngreater than 127 left intact."
  },
  {
    "name": "LTRIM",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Identical to TRIM, but only removes leading characters."
  },
  {
    "name": "NORMALIZE",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING",
    "description": "Takes a string value and returns it as a normalized string. If you do not\nprovide a normalization mode, NFC is used.Normalization is used to ensure that\ntwo strings are equivalent. Normalization is often used in situations in which\ntwo strings render the same on the screen but have different Unicode code\npoints.NORMALIZE supports four optional normalization modes:Value\nName\nDescription\n\nNFC\nNormalization Form Canonical Composition\nDecomposes and recomposes characters by canonical equivalence.\nNFKC\nNormalization Form Compatibility Composition\nDecomposes characters by compatibility, then recomposes them by canonical equivalence.\nNFD\nNormalization Form Canonical Decomposition\nDecomposes characters by canonical equivalence, and multiple combining characters are arranged in a specific order.\nNFKD\nNormalization Form Compatibility Decomposition\nDecomposes characters by compatibility, and multiple combining characters are arranged in a specific order."
  },
  {
    "name": "NORMALIZE_AND_CASEFOLD",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING",
    "description": "Takes a string value and returns it as a normalized string. If you do not\nprovide a normalization mode, NFC is used.Normalization is used to ensure that\ntwo strings are equivalent. Normalization is often used in situations in which\ntwo strings render the same on the screen but have different Unicode code\npoints.Case folding is used for the caseless\ncomparison of strings. If you need to compare strings and case should not be\nconsidered, use NORMALIZE_AND_CASEFOLD, otherwise use\nNORMALIZE.NORMALIZE_AND_CASEFOLD supports four optional normalization modes:Value\nName\nDescription\n\nNFC\nNormalization Form Canonical Composition\nDecomposes and recomposes characters by canonical equivalence.\nNFKC\nNormalization Form Compatibility Composition\nDecomposes characters by compatibility, then recomposes them by canonical equivalence.\nNFD\nNormalization Form Canonical Decomposition\nDecomposes characters by canonical equivalence, and multiple combining characters are arranged in a specific order.\nNFKD\nNormalization Form Compatibility Decomposition\nDecomposes characters by compatibility, and multiple combining characters are arranged in a specific order."
  },
  {
    "name": "REGEXP_CONTAINS",
    "arguments": [],
    "category": "String functions",
    "return_type": "BOOL",
    "description": "Returns TRUE if value is a partial match for the regular expression,\nregexp.If the regexp argument is invalid, the function returns an error.You can search for a full match by using ^ (beginning of text) and $ (end of\ntext). Due to regular expression operator precedence, it is good practice to use\nparentheses around everything between ^ and $.Note:BigQuery provides regular expression support using the\nre2 library; see that documentation for its\nregular expression syntax."
  },
  {
    "name": "REGEXP_EXTRACT",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Returns the substring in value that matches the regular expression, regexp.\nReturns NULL if there is no match.If the regular expression contains a capturing group, the function returns the\nsubstring that is matched by that capturing group. If the expression does not\ncontain a capturing group, the function returns the entire matching substring.If position is specified, the search starts at this\nposition in value, otherwise it starts at the beginning of value. The\nposition must be a positive integer and cannot be 0. If position is greater\nthan the length of value, NULL is returned.If occurrence is specified, the search returns a specific occurrence of the\nregexp in value, otherwise returns the first match. If occurrence is\ngreater than the number of matches found, NULL is returned. For\noccurrence > 1, the function searches for additional occurrences beginning\nwith the character following the previous occurrence.Returns an error if:The regular expression is invalid\nThe regular expression has more than one capturing group\nThe position is not a positive integer\nThe occurrence is not a positive integerNote:BigQuery provides regular expression support using the\nre2 library; see that documentation for its\nregular expression syntax."
  },
  {
    "name": "REGEXP_EXTRACT_ALL",
    "arguments": [],
    "category": "String functions",
    "return_type": "An ARRAY of either STRINGs or BYTES",
    "description": "Returns an array of all substrings of value that match the regular expression,\nregexp.The REGEXP_EXTRACT_ALL function only returns non-overlapping matches. For\nexample, using this function to extract ana from banana returns only one\nsubstring, not two.Note:BigQuery provides regular expression support using the\nre2 library; see that documentation for its\nregular expression syntax."
  },
  {
    "name": "REGEXP_INSTR",
    "arguments": [],
    "category": "String functions",
    "return_type": "INT64",
    "description": "Returns the lowest 1-based index of a regular expression, regexp, in\nsource_value. Returns 0 when no match is found or the regular expression\nis empty. Returns an error if the regular expression is invalid or has more than\none capturing group. source_value and regexp must be the same type, either\nSTRING or BYTES.If position is specified, the search starts at this position in\nsource_value, otherwise it starts at the beginning of source_value.\nposition cannot be 0 or negative.If occurrence is specified, the search returns the position of a specific\ninstance of regexp in source_value, otherwise it returns the index of\nthe first occurrence. If occurrence is greater than the number of matches\nfound, 0 is returned. For occurrence > 1, the function searches for\noverlapping occurrences, in other words, the function searches for additional\noccurrences beginning with the second character in the previous occurrence.\noccurrence cannot be 0 or negative.You can optionally use occurrence_position to specify where a position\nin relation to an occurrence starts. Your choices are:\n+  0: Returns the beginning position of the occurrence.\n+  1: Returns the first position following the end of the occurrence. If the\n   end of the occurrence is also the end of the input, one off the\n   end of the occurrence is returned. For example, length of a string + 1."
  },
  {
    "name": "REGEXP_REPLACE",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Returns a STRING where all substrings of value that\nmatch regular expression regexp are replaced with replacement.You can use backslashed-escaped digits (\\1 to \\9) within the replacement\nargument to insert text matching the corresponding parenthesized group in the\nregexp pattern. Use \\0 to refer to the entire matching text.To add a backslash in your regular expression, you must first escape it. For\nexample, SELECT REGEXP_REPLACE('abc', 'b(.)', 'X\\\\1'); returns aXc. You can\nalso use raw strings to remove one layer of\nescaping, for example SELECT REGEXP_REPLACE('abc', 'b(.)', r'X\\1');.The REGEXP_REPLACE function only replaces non-overlapping matches. For\nexample, replacing ana within banana results in only one replacement, not\ntwo.If the regexp argument is not a valid regular expression, this function\nreturns an error.Note:BigQuery provides regular expression support using the\nre2 library; see that documentation for its\nregular expression syntax."
  },
  {
    "name": "REGEXP_SUBSTR",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Synonym for REGEXP_EXTRACT."
  },
  {
    "name": "REPLACE",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Replaces all occurrences of from_value with to_value in original_value.\nIf from_value is empty, no replacement is made.This function supports specifying collation."
  },
  {
    "name": "REPEAT",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Returns a STRING or BYTES value that consists of original_value, repeated.\nThe repetitions parameter specifies the number of times to repeat\noriginal_value. Returns NULL if either original_value or repetitions\nare NULL.This function returns an error if the repetitions value is negative."
  },
  {
    "name": "REVERSE",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Returns the reverse of the input STRING or BYTES."
  },
  {
    "name": "RIGHT",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Returns a STRING or BYTES value that consists of the specified\nnumber of rightmost characters or bytes from value. The length is an\nINT64 that specifies the length of the returned\nvalue. If value is BYTES, length is the number of rightmost bytes to\nreturn. If value is STRING, length is the number of rightmost characters\nto return.If length is 0, an empty STRING or BYTES value will be\nreturned. If length is negative, an error will be returned. If length\nexceeds the number of characters or bytes from value, the original value\nwill be returned."
  },
  {
    "name": "RPAD",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Returns a STRING or BYTES value that consists of original_value appended\nwith pattern. The return_length parameter is an\nINT64 that specifies the length of the\nreturned value. If original_value is BYTES,\nreturn_length is the number of bytes. If original_value is STRING,\nreturn_length is the number of characters.The default value of pattern is a blank space.Both original_value and pattern must be the same data type.If return_length is less than or equal to the original_value length, this\nfunction returns the original_value value, truncated to the value of\nreturn_length. For example, RPAD('hello world', 7); returns 'hello w'.If original_value, return_length, or pattern is NULL, this function\nreturns NULL.This function returns an error if:return_length is negative\npattern is empty"
  },
  {
    "name": "RTRIM",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Identical to TRIM, but only removes trailing characters."
  },
  {
    "name": "SAFE_CONVERT_BYTES_TO_STRING",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING",
    "description": "Converts a sequence of BYTES to a STRING. Any invalid UTF-8 characters are\nreplaced with the Unicode replacement character, U+FFFD."
  },
  {
    "name": "SOUNDEX",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING",
    "description": "Returns a STRING that represents the\nSoundex code for value.SOUNDEX produces a phonetic representation of a string. It indexes words by\nsound, as pronounced in English. It is typically used to help determine whether\ntwo strings, such as the family names Levine and Lavine, or the words to\nand too, have similar English-language pronunciation.The result of the SOUNDEX consists of a letter followed by 3 digits. Non-latin\ncharacters are ignored. If the remaining string is empty after removing\nnon-Latin characters, an empty STRING is returned."
  },
  {
    "name": "SPLIT",
    "arguments": [],
    "category": "String functions",
    "return_type": "ARRAY of type STRING or\nARRAY of type BYTES",
    "description": "Splits value using the delimiter argument.For STRING, the default delimiter is the comma ,.For BYTES, you must specify a delimiter.Splitting on an empty delimiter produces an array of UTF-8 characters for\nSTRING values, and an array of BYTES for BYTES values.Splitting an empty STRING returns an\nARRAY with a single empty\nSTRING.This function supports specifying collation."
  },
  {
    "name": "STARTS_WITH",
    "arguments": [],
    "category": "String functions",
    "return_type": "BOOL",
    "description": "Takes two STRING or BYTES values. Returns TRUE if the second value is a\nprefix of the first.This function supports specifying collation."
  },
  {
    "name": "STRPOS",
    "arguments": [],
    "category": "String functions",
    "return_type": "INT64",
    "description": "Takes two STRING or BYTES values. Returns the 1-based index of the first\noccurrence of value2 inside value1. Returns 0 if value2 is not found.This function supports specifying collation."
  },
  {
    "name": "SUBSTR",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "Returns a substring of the supplied STRING or BYTES value.The position argument is an integer specifying the starting position of the\nsubstring.If position is 1, the substring starts from the first character or byte.\nIf position is 0 or less than -LENGTH(value), position is set to 1,\nand the substring starts from the first character or byte.\nIf position is greater than the length of value, the function produces\nan empty substring.\nIf position is negative, the function counts from the end of value,\nwith -1 indicating the last character or byte.The length argument specifies the maximum number of characters or bytes to\nreturn.If length is not specified, the function produces a substring that starts\nat the specified position and ends at the last character or byte of value.\nIf length is 0, the function produces an empty substring.\nIf length is negative, the function produces an error.\nThe returned substring may be shorter than length, for example, when\nlength exceeds the length of value, or when the starting position of the\nsubstring plus length is greater than the length of value."
  },
  {
    "name": "TO_BASE32",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING",
    "description": "Converts a sequence of BYTES into a base32-encoded STRING. To convert a\nbase32-encoded STRING into BYTES, use FROM_BASE32."
  },
  {
    "name": "TO_BASE64",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING",
    "description": "Converts a sequence of BYTES into a base64-encoded STRING. To convert a\nbase64-encoded STRING into BYTES, use FROM_BASE64.There are several base64 encodings in common use that vary in exactly which\nalphabet of 65 ASCII characters are used to encode the 64 digits and padding.\nSee RFC 4648 for details. This\nfunction adds padding and uses the alphabet [A-Za-z0-9+/=]."
  },
  {
    "name": "TO_CODE_POINTS",
    "arguments": [],
    "category": "String functions",
    "return_type": "ARRAY of INT64",
    "description": "Takes a value and returns an array of\nINT64.If value is a STRING, each element in the returned array represents a\ncode point. Each code point falls\nwithin the range of [0, 0xD7FF] and [0xE000, 0x10FFFF].\nIf value is BYTES, each element in the array is an extended ASCII\ncharacter value in the range of [0, 255].To convert from an array of code points to a STRING or BYTES, see\nCODE_POINTS_TO_STRING or\nCODE_POINTS_TO_BYTES."
  },
  {
    "name": "TO_HEX",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING",
    "description": "Converts a sequence of BYTES into a hexadecimal STRING. Converts each byte\nin the STRING as two hexadecimal characters in the range\n(0..9, a..f). To convert a hexadecimal-encoded\nSTRING to BYTES, use FROM_HEX."
  },
  {
    "name": "TRANSLATE",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "In expression, replaces each character in source_characters with the\ncorresponding character in target_characters. All inputs must be the same\ntype, either STRING or BYTES.Each character in expression is translated at most once.\nA character in expression that is not present in source_characters is left\nunchanged in expression.\nA character in source_characters without a corresponding character in\ntarget_characters is omitted from the result.\nA duplicate character in source_characters results in an error."
  },
  {
    "name": "TRIM",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING if value_to_trim is a STRING value.\nBYTES if value_to_trim is a BYTES value.",
    "description": "Takes a STRING or BYTES value to trim.If the value to trim is a STRING, removes from this value all leading and\ntrailing Unicode code points in set_of_characters_to_remove.\nThe set of code points is optional. If it is not specified, all\nwhitespace characters are removed from the beginning and end of the\nvalue to trim.If the value to trim is BYTES, removes from this value all leading and\ntrailing bytes in set_of_characters_to_remove. The set of bytes is required."
  },
  {
    "name": "UNICODE",
    "arguments": [],
    "category": "String functions",
    "return_type": "INT64",
    "description": "Returns the Unicode code point for the first character in\nvalue. Returns 0 if value is empty, or if the resulting Unicode code\npoint is 0."
  },
  {
    "name": "UPPER",
    "arguments": [],
    "category": "String functions",
    "return_type": "STRING or BYTES",
    "description": "For STRING arguments, returns the original string with all alphabetic\ncharacters in uppercase. Mapping between uppercase and lowercase is done\naccording to the\nUnicode Character Database\nwithout taking into account language-specific mappings.For BYTES arguments, the argument is treated as ASCII text, with all bytes\ngreater than 127 left intact."
  },
  {
    "name": "JSON_EXTRACT",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "json_string_expr: A JSON-formatted STRING\njson_expr: JSON",
    "description": "Extracts a JSON value, such as an array or object, or a JSON scalar\nvalue, such as a string, number, or boolean. If a JSON key uses invalid\nJSONPath characters, then you can escape those characters\nusing single quotes and brackets.json_string_expr: A JSON-formatted string. For example:\n'{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\nExtracts a SQL NULL when a JSON-formatted string null is encountered.\nFor example:\nSELECT JSON_EXTRACT(\"null\", \"$\") -- Returns a SQL NULL\njson_expr: JSON. For example:\nJSON '{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\nExtracts a JSON null when a JSON null is encountered.\nSELECT JSON_EXTRACT(JSON 'null', \"$\") -- Returns a JSON 'null'\njson_path: The JSONPath. This identifies the data that\nyou want to obtain from the input."
  },
  {
    "name": "JSON_QUERY",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "json_string_expr: A JSON-formatted STRING\njson_expr: JSON",
    "description": "Extracts a JSON value, such as an array or object, or a JSON scalar\nvalue, such as a string, number, or boolean. If a JSON key uses invalid\nJSONPath characters, then you can escape those characters\nusing double quotes.json_string_expr: A JSON-formatted string. For example:\n'{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\nExtracts a SQL NULL when a JSON-formatted string null is encountered.\nFor example:\nSELECT JSON_QUERY(\"null\", \"$\") -- Returns a SQL NULL\njson_expr: JSON. For example:\nJSON '{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\nExtracts a JSON null when a JSON null is encountered.\nSELECT JSON_QUERY(JSON 'null', \"$\") -- Returns a JSON 'null'\njson_path: The JSONPath. This identifies the data that\nyou want to obtain from the input."
  },
  {
    "name": "JSON_EXTRACT_SCALAR",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "STRING",
    "description": "Extracts a scalar value and then returns it as a string. A scalar value can\nrepresent a string, number, or boolean. Removes the outermost quotes and\nunescapes the return values. If a JSON key uses invalid\nJSONPath characters, then you can escape those characters\nusing single quotes and brackets.json_string_expr: A JSON-formatted string. For example:\n'{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\njson_expr: JSON. For example:\nJSON '{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\njson_path: The JSONPath. This identifies the data that\nyou want to obtain from the input. If this optional parameter is not\nprovided, then the JSONPath $ symbol is applied, which means that all of\nthe data is analyzed.\n\nIf json_path returns a JSON null or a non-scalar value (in other words,\nif json_path refers to an object or an array), then a SQL NULL is\nreturned."
  },
  {
    "name": "JSON_VALUE",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "STRING",
    "description": "Extracts a scalar value and then returns it as a string. A scalar value can\nrepresent a string, number, or boolean. Removes the outermost quotes and\nunescapes the return values. If a JSON key uses invalid\nJSONPath characters, then you can escape those characters\nusing double quotes.json_string_expr: A JSON-formatted string. For example:\n'{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\njson_expr: JSON. For example:\nJSON '{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\njson_path: The JSONPath. This identifies the data that\nyou want to obtain from the input. If this optional parameter is not\nprovided, then the JSONPath $ symbol is applied, which means that all of\nthe data is analyzed.\n\nIf json_path returns a JSON null or a non-scalar value (in other words,\nif json_path refers to an object or an array), then a SQL NULL is\nreturned."
  },
  {
    "name": "JSON_EXTRACT_ARRAY",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "json_string_expr: ARRAY<JSON-formatted STRING>\njson_expr: ARRAY<JSON>",
    "description": "Extracts an array of JSON values, such as arrays or objects, and\nJSON scalar values, such as strings, numbers, and booleans.\nIf a JSON key uses invalid\nJSONPath characters, then you can escape those characters\nusing single quotes and brackets.json_string_expr: A JSON-formatted string. For example:\n'{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\njson_expr: JSON. For example:\nJSON '{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\njson_path: The JSONPath. This identifies the data that\nyou want to obtain from the input. If this optional parameter is not\nprovided, then the JSONPath $ symbol is applied, which means that all of\nthe data is analyzed."
  },
  {
    "name": "JSON_QUERY_ARRAY",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "json_string_expr: ARRAY<JSON-formatted STRING>\njson_expr: ARRAY<JSON>",
    "description": "Extracts an array of JSON values, such as arrays or objects, and\nJSON scalar values, such as strings, numbers, and booleans.\nIf a JSON key uses invalid\nJSONPath characters, then you can escape those characters\nusing double quotes.json_string_expr: A JSON-formatted string. For example:\n'{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\njson_expr: JSON. For example:\nJSON '{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\njson_path: The JSONPath. This identifies the data that\nyou want to obtain from the input. If this optional parameter is not\nprovided, then the JSONPath $ symbol is applied, which means that all of\nthe data is analyzed."
  },
  {
    "name": "JSON_EXTRACT_STRING_ARRAY",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "ARRAY<STRING>",
    "description": "Extracts an array of scalar values and returns an array of string-formatted\nscalar values. A scalar value can represent a string, number, or boolean.\nIf a JSON key uses invalid JSONPath characters, you can\nescape those characters using single quotes and brackets.json_string_expr: A JSON-formatted string. For example:\n'{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\njson_expr: JSON. For example:\nJSON '{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\njson_path: The JSONPath. This identifies the data that\nyou want to obtain from the input. If this optional parameter is not\nprovided, then the JSONPath $ symbol is applied, which means that all of\nthe data is analyzed.Caveats:A JSON null in the input array produces a SQL NULL as the output for that\nJSON null. If the output contains a NULL array element, an error is\nproduced because the final output cannot be an array with NULL values.\nIf a JSONPath matches an array that contains scalar objects and a JSON null,\nthen the output of the function must be transformed because the final output\ncannot be an array with NULL values."
  },
  {
    "name": "JSON_VALUE_ARRAY",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "ARRAY<STRING>",
    "description": "Extracts an array of scalar values and returns an array of string-formatted\nscalar values. A scalar value can represent a string, number, or boolean.\nIf a JSON key uses invalid JSONPath characters, you can\nescape those characters using double quotes.json_string_expr: A JSON-formatted string. For example:\n'{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\njson_expr: JSON. For example:\nJSON '{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'\njson_path: The JSONPath. This identifies the data that\nyou want to obtain from the input. If this optional parameter is not\nprovided, then the JSONPath $ symbol is applied, which means that all of\nthe data is analyzed.Caveats:A JSON null in the input array produces a SQL NULL as the output for\nJSON null. If the output contains a NULL array element, an error is\nproduced because the final output cannot be an array with NULL values.\nIf a JSONPath matches an array that contains scalar objects and a JSON null,\nthen the output of the function must be transformed because the final output\ncannot be an array with NULL values."
  },
  {
    "name": "PARSE_JSON",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "JSON",
    "description": "Takes a SQL STRING value and returns a SQL JSON value.\nThe STRING value represents a string-formatted JSON value.This function supports an optional mandatory-named argument called\nwide_number_mode that determines how to handle numbers that cannot be stored\nin a JSON value without the loss of precision. If used,\nwide_number_mode must include one of these values:exact: Only accept numbers that can be stored without loss of precision. If\na number that cannot be stored without loss of precision is encountered,\nthe function throws an error.\nround: If a number that cannot be stored without loss of precision is\nencountered, attempt to round it to a number that can be stored without\nloss of precision. If the number cannot be rounded, the function throws an\nerror.If wide_number_mode is not used, the function implicitly includes\nwide_number_mode=>'exact'. If a number appears in a JSON object or array,\nthe wide_number_mode argument is applied to the number in the object or array.Numbers from the following domains can be stored in JSON without loss of\nprecision:64-bit signed/unsigned integers, such as INT64\nFLOAT64"
  },
  {
    "name": "TO_JSON",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "A JSON value",
    "description": "Takes a SQL value and returns a JSON value. The value\nmust be a supported BigQuery data type. You can review the\nBigQuery data types that this function supports and their\nJSON encodings here.This function supports an optional mandatory-named argument called\nstringify_wide_numbers.If this argument is TRUE, numeric values outside\nof the FLOAT64 type domain are encoded as strings.\nIf this argument is not used or is FALSE, numeric values outside\nof the FLOAT64 type domain are not encoded\nas strings, but are stored as JSON numbers. If a numerical value cannot be\nstored in JSON without loss of precision, an error is thrown.The following numerical data types are affected by the\nstringify_wide_numbers argument:INT64\nNUMERIC\nBIGNUMERICIf one of these numerical data types appears in a container data type\nsuch as an ARRAY or STRUCT, the stringify_wide_numbers argument is\napplied to the numerical data types in the container data type."
  },
  {
    "name": "TO_JSON_STRING",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "A JSON-formatted STRING",
    "description": "Takes a SQL value and returns a JSON-formatted string\nrepresentation of the value. The value must be a supported BigQuery\ndata type. You can review the BigQuery data types that this function\nsupports and their JSON encodings here.This function supports an optional boolean parameter called pretty_print.\nIf pretty_print is true, the returned value is formatted for easy\nreadability."
  },
  {
    "name": "STRING",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "STRING",
    "description": "Takes a JSON expression, extracts a JSON string, and returns that value as a SQL\nSTRING. If the expression is SQL NULL, the function returns SQL\nNULL. If the extracted JSON value is not a string, an error is produced.json_expr: JSON. For example:\nJSON '{\"name\": \"sky\", \"color\" : \"blue\"}'"
  },
  {
    "name": "BOOL",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "BOOL",
    "description": "Takes a JSON expression, extracts a JSON boolean, and returns that value as a SQL\nBOOL. If the expression is SQL NULL, the function returns SQL\nNULL. If the extracted JSON value is not a boolean, an error is produced.json_expr: JSON. For example:\nJSON '{\"name\": \"sky\", \"color\" : \"blue\"}'"
  },
  {
    "name": "INT64",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "INT64",
    "description": "Takes a JSON expression, extracts a JSON number and returns that value as a SQL\nINT64. If the expression is SQL NULL, the function returns SQL\nNULL. If the extracted JSON number has a fractional part or is outside of the\nINT64 domain, an error is produced.json_expr: JSON. For example:\nJSON '{\"name\": \"sky\", \"color\" : \"blue\"}'"
  },
  {
    "name": "FLOAT64",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "FLOAT64",
    "description": "Takes a JSON expression, extracts a JSON number and returns that value as a SQL\nFLOAT64. If the expression is SQL NULL, the\nfunction returns SQL NULL. If the extracted JSON value is not a number, an\nerror is produced.json_expr: JSON. For example:\nJSON '{\"name\": \"sky\", \"color\" : \"blue\"}'This function supports an optional mandatory-named argument called\nwide_number_mode which defines what happens with a number that cannot be\nrepresented as a FLOAT64 without loss of precision.This argument accepts one of the two case-sensitive values:‘exact’: The function fails if the result cannot be represented as a\nFLOAT64 without loss of precision.\n‘round’: The numeric value stored in JSON will be rounded to\nFLOAT64. If such rounding is not possible, the\nfunction fails. This is the default value if the argument is not specified."
  },
  {
    "name": "JSON_TYPE",
    "arguments": [],
    "category": "JSON functions",
    "return_type": "STRING",
    "description": "Takes a JSON expression and returns the type of the outermost JSON value as a\nSQL STRING. The names of these JSON types can be returned:object\narray\nstring\nnumber\nboolean\nnullIf the expression is SQL NULL, the function returns SQL NULL. If the\nextracted JSON value is not a valid JSON type, an error is produced.json_expr: JSON. For example:\nJSON '{\"name\": \"sky\", \"color\" : \"blue\"}'"
  },
  {
    "name": "ARRAY",
    "arguments": [],
    "category": "Array functions",
    "return_type": "Subqueries are unordered, so the elements of the output ARRAY are not\nguaranteed to preserve any order in the source table for the subquery. However,\nif the subquery includes an ORDER BY clause, the ARRAY function will return\nan ARRAY that honors that clause.\nIf the subquery returns more than one column, the ARRAY function returns an\nerror.\nIf the subquery returns an ARRAY typed column or ARRAY typed rows, the\nARRAY function returns an error: BigQuery does not support\nARRAYs with elements of type\nARRAY.\nIf the subquery returns zero rows, the ARRAY function returns an empty\nARRAY. It never returns a NULL ARRAY.",
    "description": "The ARRAY function returns an ARRAY with one element for each row in a\nsubquery.If subquery produces a\nSQL table,\nthe table must have exactly one column. Each element in the output ARRAY is\nthe value of the single column of a row in the table.If subquery produces a\nvalue table,\nthen each element in the output ARRAY is the entire corresponding row of the\nvalue table."
  },
  {
    "name": "ARRAY_CONCAT",
    "arguments": [],
    "category": "Array functions",
    "return_type": "ARRAY",
    "description": "Concatenates one or more arrays with the same element type into a single array.The function returns NULL if any input argument is NULL.Note:You can also use the || concatenation operator\nto concatenate arrays."
  },
  {
    "name": "ARRAY_LENGTH",
    "arguments": [],
    "category": "Array functions",
    "return_type": "INT64",
    "description": "Returns the size of the array. Returns 0 for an empty array. Returns NULL if\nthe array_expression is NULL."
  },
  {
    "name": "ARRAY_TO_STRING",
    "arguments": [],
    "category": "Array functions",
    "return_type": "STRING",
    "description": "Returns a concatenation of the elements in array_expression\nas a STRING. The value for array_expression\ncan either be an array of STRING or\nBYTES data types.If the null_text parameter is used, the function replaces any NULL values in\nthe array with the value of null_text.If the null_text parameter is not used, the function omits the NULL value\nand its preceding delimiter."
  },
  {
    "name": "GENERATE_ARRAY",
    "arguments": [],
    "category": "Array functions",
    "return_type": "ARRAY",
    "description": "Returns an array of values. The start_expression and end_expression\nparameters determine the inclusive start and end of the array.The GENERATE_ARRAY function accepts the following data types as inputs:INT64\nNUMERIC\nBIGNUMERIC\nFLOAT64The step_expression parameter determines the increment used to\ngenerate array values. The default value for this parameter is 1.This function returns an error if step_expression is set to 0, or if any\ninput is NaN.If any argument is NULL, the function will return a NULL array."
  },
  {
    "name": "GENERATE_DATE_ARRAY",
    "arguments": [],
    "category": "Array functions",
    "return_type": "ARRAY containing 0 or more DATE values.",
    "description": "Returns an array of dates. The start_date and end_date\nparameters determine the inclusive start and end of the array.The GENERATE_DATE_ARRAY function accepts the following data types as inputs:start_date must be a DATE.\nend_date must be a DATE.\nINT64_expr must be an INT64.\ndate_part must be either DAY, WEEK, MONTH, QUARTER, or YEAR.The INT64_expr parameter determines the increment used to generate dates. The\ndefault value for this parameter is 1 day.This function returns an error if INT64_expr is set to 0."
  },
  {
    "name": "GENERATE_TIMESTAMP_ARRAY",
    "arguments": [],
    "category": "Array functions",
    "return_type": "An ARRAY containing 0 or more TIMESTAMP values.",
    "description": "Returns an ARRAY of TIMESTAMPS separated by a given interval. The\nstart_timestamp and end_timestamp parameters determine the inclusive\nlower and upper bounds of the ARRAY.The GENERATE_TIMESTAMP_ARRAY function accepts the following data types as\ninputs:start_timestamp: TIMESTAMP\nend_timestamp: TIMESTAMP\nstep_expression: INT64\nAllowed date_part values are:\nMICROSECOND, MILLISECOND, SECOND, MINUTE, HOUR, or DAY.The step_expression parameter determines the increment used to generate\ntimestamps."
  },
  {
    "name": "ARRAY_REVERSE",
    "arguments": [],
    "category": "Array functions",
    "return_type": "ARRAY",
    "description": "Returns the input ARRAY with elements in reverse order."
  },
  {
    "name": "CURRENT_DATE",
    "arguments": [],
    "category": "Date functions",
    "return_type": "DATE",
    "description": "Returns the current date as of the specified or default time zone. Parentheses\nare optional when called with no\narguments.This function supports an optional\ntime_zone parameter. This parameter is a string representing the time zone to\nuse. If no time zone is specified, the default time zone,\nUTC, is used. See\nTime zone definitions\nfor information on how to specify a time zone.If the time_zone parameter evaluates to NULL, this function returns NULL."
  },
  {
    "name": "EXTRACT",
    "arguments": [],
    "category": "Date functions",
    "return_type": "INT64",
    "description": "Returns the value corresponding to the specified date part. The part must\nbe one of:DAYOFWEEK: Returns values in the range [1,7] with Sunday as the first day\nof the week.\nDAY\nDAYOFYEAR\nWEEK: Returns the week number of the date in the range [0, 53]. Weeks begin\nwith Sunday, and dates prior to the first Sunday of the year are in week 0.\nWEEK(<WEEKDAY>): Returns the week number of the date in the range [0, 53].\nWeeks begin on WEEKDAY. Dates prior to\nthe first WEEKDAY of the year are in week 0. Valid values for WEEKDAY are\nSUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, and\nSATURDAY.\nISOWEEK: Returns the ISO 8601 week\nnumber of the date_expression. ISOWEEKs begin on Monday. Return values\nare in the range [1, 53]. The first ISOWEEK of each ISO year begins on the\nMonday before the first Thursday of the Gregorian calendar year.\nMONTH\nQUARTER: Returns values in the range [1,4].\nYEAR\nISOYEAR: Returns the ISO 8601\nweek-numbering year, which is the Gregorian calendar year containing the\nThursday of the week to which date_expression belongs."
  },
  {
    "name": "DATE",
    "arguments": [],
    "category": "Date functions",
    "return_type": "DATE",
    "description": "Constructs a DATE from INT64 values representing\nthe year, month, and day.\nExtracts the DATE from a TIMESTAMP expression. It supports an\noptional parameter to specify a time zone. If no\ntime zone is specified, the default time zone, UTC, is used.\nExtracts the DATE from a DATETIME expression."
  },
  {
    "name": "DATE_ADD",
    "arguments": [],
    "category": "Date functions",
    "return_type": "DATE",
    "description": "Adds a specified time interval to a DATE.DATE_ADD supports the following date_part values:DAY\nWEEK. Equivalent to 7 DAYs.\nMONTH\nQUARTER\nYEARSpecial handling is required for MONTH, QUARTER, and YEAR parts when\nthe date is at (or near) the last day of the month. If the resulting\nmonth has fewer days than the original date's day, then the resulting\ndate is the last date of that month."
  },
  {
    "name": "DATE_SUB",
    "arguments": [],
    "category": "Date functions",
    "return_type": "DATE",
    "description": "Subtracts a specified time interval from a DATE.DATE_SUB supports the following date_part values:DAY\nWEEK. Equivalent to 7 DAYs.\nMONTH\nQUARTER\nYEARSpecial handling is required for MONTH, QUARTER, and YEAR parts when\nthe date is at (or near) the last day of the month. If the resulting\nmonth has fewer days than the original date's day, then the resulting\ndate is the last date of that month."
  },
  {
    "name": "DATE_DIFF",
    "arguments": [],
    "category": "Date functions",
    "return_type": "INT64",
    "description": "Returns the whole number of specified date_part intervals between two\nDATE objects (date_expression_a - date_expression_b).\nIf the first DATE is earlier than the second one,\nthe output is negative.DATE_DIFF supports the following date_part values:DAY\nWEEK This date part begins on Sunday.\nWEEK(<WEEKDAY>): This date part begins on WEEKDAY. Valid values for\nWEEKDAY are SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY,\nFRIDAY, and SATURDAY.\nISOWEEK: Uses ISO 8601 week\nboundaries. ISO weeks begin on Monday.\nMONTH, except when the first two arguments are TIMESTAMP objects.\nQUARTER\nYEAR\nISOYEAR: Uses the ISO 8601\nweek-numbering year boundary. The ISO year boundary is the Monday of the\nfirst week whose Thursday belongs to the corresponding Gregorian calendar\nyear."
  },
  {
    "name": "DATE_TRUNC",
    "arguments": [],
    "category": "Date functions",
    "return_type": "DATE",
    "description": "Truncates a DATE value to the granularity of date_part. The DATE value\nis always rounded to the beginning of date_part, which can be one of the\nfollowing:DAY: The day in the Gregorian calendar year that contains the\nDATE value.\nWEEK: The first day of the week in the week that contains the\nDATE value. Weeks begin on Sundays. WEEK is equivalent to\nWEEK(SUNDAY).\nWEEK(WEEKDAY): The first day of the week in the week that contains the\nDATE value. Weeks begin on WEEKDAY. WEEKDAY must be one of the\nfollowing: SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY,\nor SATURDAY.\nISOWEEK: The first day of the ISO 8601 week in the\nISO week that contains the DATE value. The ISO week begins on\nMonday. The first ISO week of each ISO year contains the first Thursday of the\ncorresponding Gregorian calendar year.\nMONTH: The first day of the month in the month that contains the\nDATE value.\nQUARTER: The first day of the quarter in the quarter that contains the\nDATE value.\nYEAR: The first day of the year in the year that contains the\nDATE value.\nISOYEAR: The first day of the ISO 8601 week-numbering year\nin the ISO year that contains the DATE value. The ISO year is the\nMonday of the first week whose Thursday belongs to the corresponding\nGregorian calendar year."
  },
  {
    "name": "DATE_FROM_UNIX_DATE",
    "arguments": [],
    "category": "Date functions",
    "return_type": "DATE",
    "description": "Interprets int64_expression as the number of days since 1970-01-01."
  },
  {
    "name": "FORMAT_DATE",
    "arguments": [],
    "category": "Date functions",
    "return_type": "STRING",
    "description": "Formats the date_expr according to the specified format_string.See Supported Format Elements For DATE\nfor a list of format elements that this function supports."
  },
  {
    "name": "LAST_DAY",
    "arguments": [],
    "category": "Date functions",
    "return_type": "DATE",
    "description": "Returns the last day from a date expression. This is commonly used to return\nthe last day of the month.You can optionally specify the date part for which the last day is returned.\nIf this parameter is not used, the default value is MONTH.\nLAST_DAY supports the following values for date_part:YEAR\nQUARTER\nMONTH\nWEEK. Equivalent to 7 DAYs.\nWEEK(<WEEKDAY>). <WEEKDAY> represents the starting day of the week.\nValid values are SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY,\nFRIDAY, and SATURDAY.\nISOWEEK. Uses ISO 8601 week boundaries. ISO weeks begin\non Monday.\nISOYEAR. Uses the ISO 8601 week-numbering year boundary.\nThe ISO year boundary is the Monday of the first week whose Thursday belongs\nto the corresponding Gregorian calendar year."
  },
  {
    "name": "PARSE_DATE",
    "arguments": [],
    "category": "Date functions",
    "return_type": "DATE",
    "description": "Converts a string representation of date to a\nDATE object.format_string contains the format elements\nthat define how date_string is formatted. Each element in\ndate_string must have a corresponding element in format_string. The\nlocation of each element in format_string must match the location of\neach element in date_string.-- This works because elements on both sides match.\nSELECT PARSE_DATE(\"%A %b %e %Y\", \"Thursday Dec 25 2008\")\n\n-- This doesn't work because the year element is in different locations.\nSELECT PARSE_DATE(\"%Y %A %b %e\", \"Thursday Dec 25 2008\")\n\n-- This doesn't work because one of the year elements is missing.\nSELECT PARSE_DATE(\"%A %b %e\", \"Thursday Dec 25 2008\")\n\n-- This works because %F can find all matching elements in date_string.\nSELECT PARSE_DATE(\"%F\", \"2000-12-30\")When using PARSE_DATE, keep the following in mind:Unspecified fields. Any unspecified field is initialized from 1970-01-01.\nCase insensitivity. Names, such as Monday, February, and so on, are\ncase insensitive.\nWhitespace. One or more consecutive white spaces in the format string\nmatches zero or more consecutive white spaces in the date string. In\naddition, leading and trailing white spaces in the date string are always\nallowed -- even if they are not in the format string.\nFormat precedence. When two (or more) format elements have overlapping\ninformation (for example both %F and %Y affect the year), the last one\ngenerally overrides any earlier ones."
  },
  {
    "name": "UNIX_DATE",
    "arguments": [],
    "category": "Date functions",
    "return_type": "INT64",
    "description": "Returns the number of days since 1970-01-01."
  },
  {
    "name": "CURRENT_DATETIME",
    "arguments": [],
    "category": "Datetime functions",
    "return_type": "DATETIME",
    "description": "Returns the current time as a DATETIME object. Parentheses are optional when\ncalled with no arguments.This function supports an optional time_zone parameter.\nSee Time zone definitions for\ninformation on how to specify a time zone."
  },
  {
    "name": "DATETIME",
    "arguments": [],
    "category": "Datetime functions",
    "return_type": "DATETIME",
    "description": "Constructs a DATETIME object using INT64 values\nrepresenting the year, month, day, hour, minute, and second.\nConstructs a DATETIME object using a DATE object and an optional TIME\nobject.\nConstructs a DATETIME object using a TIMESTAMP object. It supports an\noptional parameter to\nspecify a time zone.\nIf no time zone is specified, the default time zone, UTC,\nis used."
  },
  {
    "name": "EXTRACT",
    "arguments": [],
    "category": "Datetime functions",
    "return_type": "INT64, except in the following cases:If part is DATE, returns a DATE object.\nIf part is TIME, returns a TIME object.",
    "description": "Returns a value that corresponds to the\nspecified part from a supplied datetime_expression.Allowed part values are:MICROSECOND\nMILLISECOND\nSECOND\nMINUTE\nHOUR\nDAYOFWEEK: Returns values in the range [1,7] with Sunday as the first day of\nof the week.\nDAY\nDAYOFYEAR\nWEEK: Returns the week number of the date in the range [0, 53].  Weeks begin\nwith Sunday, and dates prior to the first Sunday of the year are in week 0.\nWEEK(<WEEKDAY>): Returns the week number of datetime_expression in the\nrange [0, 53]. Weeks begin on WEEKDAY.\ndatetimes prior to the first WEEKDAY of the year are in week 0. Valid\nvalues for WEEKDAY are SUNDAY, MONDAY, TUESDAY, WEDNESDAY,\nTHURSDAY, FRIDAY, and SATURDAY.\nISOWEEK: Returns the ISO 8601 week\nnumber of the datetime_expression. ISOWEEKs begin on Monday. Return values\nare in the range [1, 53]. The first ISOWEEK of each ISO year begins on the\nMonday before the first Thursday of the Gregorian calendar year.\nMONTH\nQUARTER\nYEAR\nISOYEAR: Returns the ISO 8601\nweek-numbering year, which is the Gregorian calendar year containing the\nThursday of the week to which date_expression belongs.\nDATE\nTIMEReturned values truncate lower order time periods. For example, when extracting\nseconds, EXTRACT truncates the millisecond and microsecond values."
  },
  {
    "name": "DATETIME_ADD",
    "arguments": [],
    "category": "Datetime functions",
    "return_type": "DATETIME",
    "description": "Adds int64_expression units of part to the DATETIME object.DATETIME_ADD supports the following values for part:MICROSECOND\nMILLISECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK. Equivalent to 7 DAYs.\nMONTH\nQUARTER\nYEARSpecial handling is required for MONTH, QUARTER, and YEAR parts when the\ndate is at (or near) the last day of the month. If the resulting month has fewer\ndays than the original DATETIME's day, then the result day is the last day of\nthe new month."
  },
  {
    "name": "DATETIME_SUB",
    "arguments": [],
    "category": "Datetime functions",
    "return_type": "DATETIME",
    "description": "Subtracts int64_expression units of part from the DATETIME.DATETIME_SUB supports the following values for part:MICROSECOND\nMILLISECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK. Equivalent to 7 DAYs.\nMONTH\nQUARTER\nYEARSpecial handling is required for MONTH, QUARTER, and YEAR parts when the\ndate is at (or near) the last day of the month. If the resulting month has fewer\ndays than the original DATETIME's day, then the result day is the last day of\nthe new month."
  },
  {
    "name": "DATETIME_DIFF",
    "arguments": [],
    "category": "Datetime functions",
    "return_type": "INT64",
    "description": "Returns the whole number of specified part intervals between two\nDATETIME objects (datetime_expression_a - datetime_expression_b).\nIf the first DATETIME is earlier than the second one,\nthe output is negative. Throws an error if the computation overflows the\nresult type, such as if the difference in\nmicroseconds\nbetween the two DATETIME objects would overflow an\nINT64 value.DATETIME_DIFF supports the following values for part:MICROSECOND\nMILLISECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK: This date part begins on Sunday.\nWEEK(<WEEKDAY>): This date part begins on WEEKDAY. Valid values for\nWEEKDAY are SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY,\nFRIDAY, and SATURDAY.\nISOWEEK: Uses ISO 8601 week\nboundaries. ISO weeks begin on Monday.\nMONTH, except when the first two arguments are TIMESTAMP objects.\nQUARTER\nYEAR\nISOYEAR: Uses the ISO 8601\nweek-numbering year boundary. The ISO year boundary is the Monday of the\nfirst week whose Thursday belongs to the corresponding Gregorian calendar\nyear."
  },
  {
    "name": "DATETIME_TRUNC",
    "arguments": [],
    "category": "Datetime functions",
    "return_type": "DATETIME",
    "description": "Truncates a DATETIME value to the granularity of date_time_part.\nThe DATETIME value is always rounded to the beginning of date_time_part,\nwhich can be one of the following:MICROSECOND: If used, nothing is truncated from the value.\nMILLISECOND: The nearest lessor or equal millisecond.\nSECOND: The nearest lessor or equal second.\nMINUTE: The nearest lessor or equal minute.\nHOUR: The nearest lessor or equal hour.\nDAY: The day in the Gregorian calendar year that contains the\nDATETIME value.\nWEEK: The first day of the week in the week that contains the\nDATETIME value. Weeks begin on Sundays. WEEK is equivalent to\nWEEK(SUNDAY).\nWEEK(WEEKDAY): The first day of the week in the week that contains the\nDATETIME value. Weeks begin on WEEKDAY. WEEKDAY must be one of the\nfollowing: SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY,\nor SATURDAY.\nISOWEEK: The first day of the ISO 8601 week in the\nISO week that contains the DATETIME value. The ISO week begins on\nMonday. The first ISO week of each ISO year contains the first Thursday of the\ncorresponding Gregorian calendar year.\nMONTH: The first day of the month in the month that contains the\nDATETIME value.\nQUARTER: The first day of the quarter in the quarter that contains the\nDATETIME value.\nYEAR: The first day of the year in the year that contains the\nDATETIME value.\nISOYEAR: The first day of the ISO 8601 week-numbering year\nin the ISO year that contains the DATETIME value. The ISO year is the\nMonday of the first week whose Thursday belongs to the corresponding\nGregorian calendar year."
  },
  {
    "name": "FORMAT_DATETIME",
    "arguments": [],
    "category": "Datetime functions",
    "return_type": "STRING",
    "description": "Formats a DATETIME object according to the specified format_string. See\nSupported Format Elements For DATETIME\nfor a list of format elements that this function supports."
  },
  {
    "name": "LAST_DAY",
    "arguments": [],
    "category": "Datetime functions",
    "return_type": "DATE",
    "description": "Returns the last day from a datetime expression that contains the date.\nThis is commonly used to return the last day of the month.You can optionally specify the date part for which the last day is returned.\nIf this parameter is not used, the default value is MONTH.\nLAST_DAY supports the following values for date_part:YEAR\nQUARTER\nMONTH\nWEEK. Equivalent to 7 DAYs.\nWEEK(<WEEKDAY>). <WEEKDAY> represents the starting day of the week.\nValid values are SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY,\nFRIDAY, and SATURDAY.\nISOWEEK. Uses ISO 8601 week boundaries. ISO weeks begin\non Monday.\nISOYEAR. Uses the ISO 8601 week-numbering year boundary.\nThe ISO year boundary is the Monday of the first week whose Thursday belongs\nto the corresponding Gregorian calendar year."
  },
  {
    "name": "PARSE_DATETIME",
    "arguments": [],
    "category": "Datetime functions",
    "return_type": "DATETIME",
    "description": "Converts a string representation of a datetime to a\nDATETIME object.format_string contains the format elements\nthat define how datetime_string is formatted. Each element in\ndatetime_string must have a corresponding element in format_string. The\nlocation of each element in format_string must match the location of\neach element in datetime_string.-- This works because elements on both sides match.\nSELECT PARSE_DATETIME(\"%a %b %e %I:%M:%S %Y\", \"Thu Dec 25 07:30:00 2008\")\n\n-- This doesn't work because the year element is in different locations.\nSELECT PARSE_DATETIME(\"%a %b %e %Y %I:%M:%S\", \"Thu Dec 25 07:30:00 2008\")\n\n-- This doesn't work because one of the year elements is missing.\nSELECT PARSE_DATETIME(\"%a %b %e %I:%M:%S\", \"Thu Dec 25 07:30:00 2008\")\n\n-- This works because %c can find all matching elements in datetime_string.\nSELECT PARSE_DATETIME(\"%c\", \"Thu Dec 25 07:30:00 2008\")The format string fully supports most format elements, except for\n%P.PARSE_DATETIME parses string according to the following rules:Unspecified fields. Any unspecified field is initialized from\n1970-01-01 00:00:00.0. For example, if the year is unspecified then it\ndefaults to 1970.\nCase insensitivity. Names, such as Monday and February,\nare case insensitive.\nWhitespace. One or more consecutive white spaces in the format string\nmatches zero or more consecutive white spaces in the\nDATETIME string. Leading and trailing\nwhite spaces in the DATETIME string are always\nallowed, even if they are not in the format string.\nFormat precedence. When two or more format elements have overlapping\ninformation, the last one generally overrides any earlier ones, with some\nexceptions. For example, both %F and %Y affect the year, so the earlier\nelement overrides the later. See the descriptions\nof %s, %C, and %y in\nSupported Format Elements For DATETIME.\nFormat divergence. %p can be used with am, AM, pm, and PM."
  },
  {
    "name": "CURRENT_TIME",
    "arguments": [],
    "category": "Time functions",
    "return_type": "TIME",
    "description": "Returns the current time as a TIME object. Parentheses are optional when\ncalled with no arguments.This function supports an optional time_zone parameter.\nSee Time zone definitions for information\non how to specify a time zone."
  },
  {
    "name": "TIME",
    "arguments": [],
    "category": "Time functions",
    "return_type": "TIME",
    "description": "Constructs a TIME object using INT64\nvalues representing the hour, minute, and second.\nConstructs a TIME object using a TIMESTAMP object. It supports an\noptional\nparameter to specify a time zone. If no\ntime zone is specified, the default time zone, UTC, is\nused.\nConstructs a TIME object using a\nDATETIME object."
  },
  {
    "name": "EXTRACT",
    "arguments": [],
    "category": "Time functions",
    "return_type": "INT64",
    "description": "Returns a value that corresponds to the specified part from\na supplied time_expression.Allowed part values are:MICROSECOND\nMILLISECOND\nSECOND\nMINUTE\nHOURReturned values truncate lower order time periods. For example, when extracting\nseconds, EXTRACT truncates the millisecond and microsecond values."
  },
  {
    "name": "TIME_ADD",
    "arguments": [],
    "category": "Time functions",
    "return_type": "TIME",
    "description": "Adds int64_expression units of part to the TIME object.TIME_ADD supports the following values for part:MICROSECOND\nMILLISECOND\nSECOND\nMINUTE\nHOURThis function automatically adjusts when values fall outside of the 00:00:00 to\n24:00:00 boundary. For example, if you add an hour to 23:30:00, the returned\nvalue is 00:30:00."
  },
  {
    "name": "TIME_SUB",
    "arguments": [],
    "category": "Time functions",
    "return_type": "TIME",
    "description": "Subtracts int64_expression units of part from the TIME object.TIME_SUB supports the following values for part:MICROSECOND\nMILLISECOND\nSECOND\nMINUTE\nHOURThis function automatically adjusts when values fall outside of the 00:00:00 to\n24:00:00 boundary. For example, if you subtract an hour from 00:30:00, the\nreturned value is 23:30:00."
  },
  {
    "name": "TIME_DIFF",
    "arguments": [],
    "category": "Time functions",
    "return_type": "INT64",
    "description": "Returns the whole number of specified part intervals between two\nTIME objects (time_expression_a - time_expression_b). If the first\nTIME is earlier than the second one, the output is negative. Throws an error\nif the computation overflows the result type, such as if the difference in\nmicroseconds\nbetween the two TIME objects would overflow an\nINT64 value.TIME_DIFF supports the following values for part:MICROSECOND\nMILLISECOND\nSECOND\nMINUTE\nHOUR"
  },
  {
    "name": "TIME_TRUNC",
    "arguments": [],
    "category": "Time functions",
    "return_type": "TIME",
    "description": "Truncates a TIME value to the granularity of time_part. The TIME value\nis always rounded to the beginning of time_part, which can be one of the\nfollowing:MICROSECOND: If used, nothing is truncated from the value.\nMILLISECOND: The nearest lessor or equal millisecond.\nSECOND: The nearest lessor or equal second.\nMINUTE: The nearest lessor or equal minute.\nHOUR: The nearest lessor or equal hour."
  },
  {
    "name": "FORMAT_TIME",
    "arguments": [],
    "category": "Time functions",
    "return_type": "STRING",
    "description": ""
  },
  {
    "name": "PARSE_TIME",
    "arguments": [],
    "category": "Time functions",
    "return_type": "TIME",
    "description": "Converts a string representation of time to a\nTIME object.format_string contains the format elements\nthat define how time_string is formatted. Each element in\ntime_string must have a corresponding element in format_string. The\nlocation of each element in format_string must match the location of\neach element in time_string.-- This works because elements on both sides match.\nSELECT PARSE_TIME(\"%I:%M:%S\", \"07:30:00\")\n\n-- This doesn't work because the seconds element is in different locations.\nSELECT PARSE_TIME(\"%S:%I:%M\", \"07:30:00\")\n\n-- This doesn't work because one of the seconds elements is missing.\nSELECT PARSE_TIME(\"%I:%M\", \"07:30:00\")\n\n-- This works because %T can find all matching elements in time_string.\nSELECT PARSE_TIME(\"%T\", \"07:30:00\")The format string fully supports most format elements except for %P.When using PARSE_TIME, keep the following in mind:Unspecified fields. Any unspecified field is initialized from\n00:00:00.0. For instance, if seconds is unspecified then it\ndefaults to 00, and so on.\nWhitespace. One or more consecutive white spaces in the format string\nmatches zero or more consecutive white spaces in the TIME string. In\naddition, leading and trailing white spaces in the TIME string are always\nallowed, even if they are not in the format string.\nFormat precedence. When two (or more) format elements have overlapping\ninformation, the last one generally overrides any earlier ones.\nFormat divergence. %p can be used with am, AM, pm, and PM."
  },
  {
    "name": "CURRENT_TIMESTAMP",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "Not applicable",
    "description": "CURRENT_TIMESTAMP() produces a TIMESTAMP value that is continuous,\nnon-ambiguous, has exactly 60 seconds per minute and does not repeat values over\nthe leap second. Parentheses are optional.This function handles leap seconds by smearing them across a window of 20 hours\naround the inserted leap second."
  },
  {
    "name": "EXTRACT",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "INT64, except when:part is DATE, returns a DATE object.\npart is DATETIME, returns a DATETIME object.\npart is TIME, returns a TIME object.",
    "description": "Returns a value that corresponds to the specified part from\na supplied timestamp_expression. This function supports an optional\ntime_zone parameter. See\nTime zone definitions for information\non how to specify a time zone.Allowed part values are:MICROSECOND\nMILLISECOND\nSECOND\nMINUTE\nHOUR\nDAYOFWEEK: Returns values in the range [1,7] with Sunday as the first day of\nof the week.\nDAY\nDAYOFYEAR\nWEEK: Returns the week number of the date in the range [0, 53].  Weeks begin\nwith Sunday, and dates prior to the first Sunday of the year are in week 0.\nWEEK(<WEEKDAY>): Returns the week number of timestamp_expression in the\nrange [0, 53]. Weeks begin on WEEKDAY. datetimes prior to the first\nWEEKDAY of the year are in week 0. Valid values for WEEKDAY are SUNDAY,\nMONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, and SATURDAY.\nISOWEEK: Returns the ISO 8601 week\nnumber of the datetime_expression. ISOWEEKs begin on Monday. Return values\nare in the range [1, 53]. The first ISOWEEK of each ISO year begins on the\nMonday before the first Thursday of the Gregorian calendar year.\nMONTH\nQUARTER\nYEAR\nISOYEAR: Returns the ISO 8601\nweek-numbering year, which is the Gregorian calendar year containing the\nThursday of the week to which date_expression belongs.\nDATE\nDATETIME\nTIMEReturned values truncate lower order time periods. For example, when extracting\nseconds, EXTRACT truncates the millisecond and microsecond values."
  },
  {
    "name": "STRING",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "STRING",
    "description": "Converts a timestamp_expression to a STRING data type. Supports an optional\nparameter to specify a time zone. See\nTime zone definitions for information\non how to specify a time zone."
  },
  {
    "name": "TIMESTAMP",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "TIMESTAMP",
    "description": "string_expression[, time_zone]: Converts a STRING expression to a TIMESTAMP\ndata type. string_expression must include a\ntimestamp literal.\nIf string_expression includes a time_zone in the timestamp literal, do not\ninclude an explicit time_zone\nargument.\ndate_expression[, time_zone]: Converts a DATE object to a TIMESTAMP\ndata type.\ndatetime_expression[, time_zone]: Converts a\nDATETIME object to a TIMESTAMP data type.This function supports an optional\nparameter to specify a time zone. If\nno time zone is specified, the default time zone, UTC,\nis used."
  },
  {
    "name": "TIMESTAMP_ADD",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "TIMESTAMP",
    "description": "Adds int64_expression units of date_part to the timestamp, independent of\nany time zone.TIMESTAMP_ADD supports the following values for date_part:MICROSECOND\nMILLISECOND\nSECOND\nMINUTE\nHOUR. Equivalent to 60 MINUTEs.\nDAY. Equivalent to 24 HOURs."
  },
  {
    "name": "TIMESTAMP_SUB",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "TIMESTAMP",
    "description": "Subtracts int64_expression units of date_part from the timestamp,\nindependent of any time zone.TIMESTAMP_SUB supports the following values for date_part:MICROSECOND\nMILLISECOND\nSECOND\nMINUTE\nHOUR. Equivalent to 60 MINUTEs.\nDAY. Equivalent to 24 HOURs."
  },
  {
    "name": "TIMESTAMP_DIFF",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "INT64",
    "description": "Returns the whole number of specified date_part intervals between two\nTIMESTAMP objects (timestamp_expression_a - timestamp_expression_b).\nIf the first TIMESTAMP is earlier than the second one,\nthe output is negative. Throws an error if the computation overflows the\nresult type, such as if the difference in\nmicroseconds\nbetween the two TIMESTAMP objects would overflow an\nINT64 value.TIMESTAMP_DIFF supports the following values for date_part:MICROSECOND\nMILLISECOND\nSECOND\nMINUTE\nHOUR. Equivalent to 60 MINUTEs.\nDAY. Equivalent to 24 HOURs."
  },
  {
    "name": "TIMESTAMP_TRUNC",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "TIMESTAMP",
    "description": "Truncates a TIMESTAMP value to the granularity of date_time_part.\nThe TIMESTAMP value is always rounded to the beginning of date_time_part,\nwhich can be one of the following:MICROSECOND: If used, nothing is truncated from the value.\nMILLISECOND: The nearest lessor or equal millisecond.\nSECOND: The nearest lessor or equal second.\nMINUTE: The nearest lessor or equal minute.\nHOUR: The nearest lessor or equal hour.\nDAY: The day in the Gregorian calendar year that contains the\nTIMESTAMP value.\nWEEK: The first day of the week in the week that contains the\nTIMESTAMP value. Weeks begin on Sundays. WEEK is equivalent to\nWEEK(SUNDAY).\nWEEK(WEEKDAY): The first day of the week in the week that contains the\nTIMESTAMP value. Weeks begin on WEEKDAY. WEEKDAY must be one of the\nfollowing: SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY,\nor SATURDAY.\nISOWEEK: The first day of the ISO 8601 week in the\nISO week that contains the TIMESTAMP value. The ISO week begins on\nMonday. The first ISO week of each ISO year contains the first Thursday of the\ncorresponding Gregorian calendar year.\nMONTH: The first day of the month in the month that contains the\nTIMESTAMP value.\nQUARTER: The first day of the quarter in the quarter that contains the\nTIMESTAMP value.\nYEAR: The first day of the year in the year that contains the\nTIMESTAMP value.\nISOYEAR: The first day of the ISO 8601 week-numbering year\nin the ISO year that contains the TIMESTAMP value. The ISO year is the\nMonday of the first week whose Thursday belongs to the corresponding\nGregorian calendar year.TIMESTAMP_TRUNC function supports an optional time_zone parameter. This\nparameter applies to the following date_time_part:MINUTE\nHOUR\nDAY\nWEEK\nWEEK(<WEEKDAY>)\nISOWEEK\nMONTH\nQUARTER\nYEAR\nISOYEARUse this parameter if you want to use a time zone other than the\ndefault time zone, UTC, as part of the\ntruncate operation.When truncating a TIMESTAMP to MINUTE\norHOUR, TIMESTAMP_TRUNC determines the civil time of the\nTIMESTAMP in the specified (or default) time zone\nand subtracts the minutes and seconds (when truncating to HOUR) or the seconds\n(when truncating to MINUTE) from that TIMESTAMP.\nWhile this provides intuitive results in most cases, the result is\nnon-intuitive near daylight savings transitions that are not hour aligned."
  },
  {
    "name": "FORMAT_TIMESTAMP",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "STRING",
    "description": "Formats a timestamp according to the specified format_string.See Supported Format Elements For TIMESTAMP\nfor a list of format elements that this function supports."
  },
  {
    "name": "PARSE_TIMESTAMP",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "TIMESTAMP",
    "description": "Converts a string representation of a timestamp to a\nTIMESTAMP object.format_string contains the format elements\nthat define how timestamp_string is formatted. Each element in\ntimestamp_string must have a corresponding element in format_string. The\nlocation of each element in format_string must match the location of\neach element in timestamp_string.-- This works because elements on both sides match.\nSELECT PARSE_TIMESTAMP(\"%a %b %e %I:%M:%S %Y\", \"Thu Dec 25 07:30:00 2008\")\n\n-- This doesn't work because the year element is in different locations.\nSELECT PARSE_TIMESTAMP(\"%a %b %e %Y %I:%M:%S\", \"Thu Dec 25 07:30:00 2008\")\n\n-- This doesn't work because one of the year elements is missing.\nSELECT PARSE_TIMESTAMP(\"%a %b %e %I:%M:%S\", \"Thu Dec 25 07:30:00 2008\")\n\n-- This works because %c can find all matching elements in timestamp_string.\nSELECT PARSE_TIMESTAMP(\"%c\", \"Thu Dec 25 07:30:00 2008\")The format string fully supports most format elements, except for\n%P.When using PARSE_TIMESTAMP, keep the following in mind:Unspecified fields. Any unspecified field is initialized from 1970-01-01\n00:00:00.0. This initialization value uses the time zone specified by the\nfunction's time zone argument, if present. If not, the initialization value\nuses the default time zone, UTC.  For instance, if the year\nis unspecified then it defaults to 1970, and so on.\nCase insensitivity. Names, such as Monday, February, and so on, are\ncase insensitive.\nWhitespace. One or more consecutive white spaces in the format string\nmatches zero or more consecutive white spaces in the timestamp string. In\naddition, leading and trailing white spaces in the timestamp string are always\nallowed, even if they are not in the format string.\nFormat precedence. When two (or more) format elements have overlapping\ninformation (for example both %F and %Y affect the year), the last one\ngenerally overrides any earlier ones, with some exceptions (see the\ndescriptions of %s, %C, and %y).\nFormat divergence. %p can be used with am, AM, pm, and PM."
  },
  {
    "name": "TIMESTAMP_SECONDS",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "TIMESTAMP",
    "description": "Interprets int64_expression as the number of seconds since 1970-01-01 00:00:00\nUTC and returns a timestamp."
  },
  {
    "name": "TIMESTAMP_MILLIS",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "TIMESTAMP",
    "description": "Interprets int64_expression as the number of milliseconds since 1970-01-01\n00:00:00 UTC and returns a timestamp."
  },
  {
    "name": "TIMESTAMP_MICROS",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "TIMESTAMP",
    "description": "Interprets int64_expression as the number of microseconds since 1970-01-01\n00:00:00 UTC and returns a timestamp."
  },
  {
    "name": "UNIX_SECONDS",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "INT64",
    "description": "Returns the number of seconds since 1970-01-01 00:00:00 UTC. Truncates higher\nlevels of precision."
  },
  {
    "name": "UNIX_MILLIS",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "INT64",
    "description": "Returns the number of milliseconds since 1970-01-01 00:00:00 UTC. Truncates\nhigher levels of precision."
  },
  {
    "name": "UNIX_MICROS",
    "arguments": [],
    "category": "Timestamp functions",
    "return_type": "INT64",
    "description": "Returns the number of microseconds since 1970-01-01 00:00:00 UTC. Truncates\nhigher levels of precision."
  },
  {
    "name": "MAKE_INTERVAL",
    "arguments": [],
    "category": "Interval functions",
    "return_type": "INTERVAL",
    "description": "Constructs an INTERVAL object using INT64 values representing the year,\nmonth, day, hour, minute, and second. All arguments are optional with default\nvalue of 0 and can be used as named arguments."
  },
  {
    "name": "EXTRACT",
    "arguments": [],
    "category": "Interval functions",
    "return_type": "INTERVAL",
    "description": "Returns the value corresponding to the specified date part. The part must be\none of YEAR, MONTH, DAY, HOUR, MINUTE, SECOND, MILLISECOND or\nMICROSECOND."
  },
  {
    "name": "JUSTIFY_DAYS",
    "arguments": [],
    "category": "Interval functions",
    "return_type": "INTERVAL",
    "description": "Normalizes the day part of the interval to the range from -29 to 29 by\nincrementing/decrementing the month or year part of the interval."
  },
  {
    "name": "JUSTIFY_HOURS",
    "arguments": [],
    "category": "Interval functions",
    "return_type": "INTERVAL",
    "description": "Normalizes the time part of the interval to the range from -23:59:59.999999 to\n23:59:59.999999 by incrementing/decrementing the day part of the interval."
  },
  {
    "name": "JUSTIFY_INTERVAL",
    "arguments": [],
    "category": "Interval functions",
    "return_type": "INTERVAL",
    "description": "Normalizes the days and time parts of the interval."
  },
  {
    "name": "S2_CELLIDFROMPOINT",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "Returns the cell ID as a signed INT64 bit-equivalent to\nunsigned 64-bit integer representation.\nCan return negative cell IDs.\nValid S2 cell levels are 0 to 30.\nlevel defaults to 30 if not explicitly specified.\nThe function only supports a single point GEOGRAPHY. Use the SAFE prefix if\nthe input can be multipoint, linestring, polygon, or an empty GEOGRAPHY.\nTo compute the covering of a complex GEOGRAPHY, use\nS2_COVERINGCELLIDS.",
    "description": "Returns the S2 cell ID covering a point GEOGRAPHY.The optional INT64 parameter level specifies the S2 cell level for the\nreturned cell. Naming this argument is optional.This is advanced functionality for interoperability with systems utilizing the\nS2 Geometry Library."
  },
  {
    "name": "S2_COVERINGCELLIDS",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "Returns the cell ID as a signed INT64 bit-equivalent to\nunsigned 64-bit integer representation.\nCan return negative cell IDs.\nValid S2 cell levels are 0 to 30.\nmax_cells defaults to 8 if not explicitly specified.\nbuffer should be nonnegative. It defaults to 0.0 meters if not explicitly\nspecified.",
    "description": "Returns an array of S2 cell ids that cover the input\nGEOGRAPHY. The function returns at most max_cells cells. The optional\narguments min_level and max_level specify minimum and maximum levels for\nreturned S2 cells. The array size is limited by the optional max_cells\nargument. The optional buffer argument specifies a buffering factor in\nmeters; the region being covered is expanded from the extent of the\ninput geography by this amount.This is advanced functionality for interoperability with systems utilizing the\nS2 Geometry Library."
  },
  {
    "name": "ST_ANGLE",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "FLOAT64",
    "description": "Takes three point GEOGRAPHY values, which represent two intersecting lines.\nReturns the angle between these lines. Point 2 and point 1 represent the first\nline and point 2 and point 3 represent the second line. The angle between\nthese lines is in radians, in the range [0, 2pi). The angle is measured\nclockwise from the first line to the second line.ST_ANGLE has the following edge cases:If points 2 and 3 are the same, returns NULL.\nIf points 2 and 1 are the same, returns NULL.\nIf points 2 and 3 are exactly antipodal, returns NULL.\nIf points 2 and 1 are exactly antipodal, returns NULL.\nIf any of the input geographies are not single points or are the empty\ngeography, then throws an error."
  },
  {
    "name": "ST_AREA",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "FLOAT64",
    "description": "Returns the area in square meters covered by the polygons in the input\nGEOGRAPHY.If geography_expression is a point or a line, returns zero. If\ngeography_expression is a collection, returns the area of the polygons in the\ncollection; if the collection does not contain polygons, returns zero.The optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.The use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE."
  },
  {
    "name": "ST_ASBINARY",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "BYTES",
    "description": "Returns the WKB representation of an input\nGEOGRAPHY.See ST_GEOGFROMWKB to construct a\nGEOGRAPHY from WKB."
  },
  {
    "name": "ST_ASGEOJSON",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "STRING",
    "description": "Returns the RFC 7946 compliant GeoJSON\nrepresentation of the input GEOGRAPHY.A BigQuery GEOGRAPHY has spherical\ngeodesic edges, whereas a GeoJSON Geometry object explicitly has planar edges.\nTo convert between these two types of edges, BigQuery adds additional\npoints to the line where necessary so that the resulting sequence of edges\nremains within 10 meters of the original edge.See ST_GEOGFROMGEOJSON to construct a\nGEOGRAPHY from GeoJSON."
  },
  {
    "name": "ST_ASTEXT",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "STRING",
    "description": "Returns the WKT representation of an input\nGEOGRAPHY.See ST_GEOGFROMTEXT to construct a\nGEOGRAPHY from WKT."
  },
  {
    "name": "ST_AZIMUTH",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "FLOAT64",
    "description": "Takes two point GEOGRAPHY values, and returns the azimuth of the line segment\nformed by points 1 and 2. The azimuth is the angle in radians measured between\nthe line from point 1 facing true North to the line segment from point 1 to\npoint 2.The positive angle is measured clockwise on the surface of a sphere. For\nexample, the azimuth for a line segment:Pointing North is 0\nPointing East is PI/2\nPointing South is PI\nPointing West is 3PI/2ST_AZIMUTH has the following edge cases:If the two input points are the same, returns NULL.\nIf the two input points are exactly antipodal, returns NULL.\nIf either of the input geographies are not single points or are the empty\ngeography, throws an error."
  },
  {
    "name": "ST_BOUNDARY",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "GEOGRAPHY",
    "description": "Returns a single GEOGRAPHY that contains the union\nof the boundaries of each component in the given input\nGEOGRAPHY.The boundary of each component of a GEOGRAPHY is\ndefined as follows:The boundary of a point is empty.\nThe boundary of a linestring consists of the endpoints of the linestring.\nThe boundary of a polygon consists of the linestrings that form the polygon\nshell and each of the polygon's holes."
  },
  {
    "name": "ST_BOUNDINGBOX",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "STRUCT<xmin FLOAT64, ymin FLOAT64, xmax FLOAT64, ymax FLOAT64>.Bounding box parts:xmin: The westmost constant longitude line that bounds the rectangle.\nxmax: The eastmost constant longitude line that bounds the rectangle.\nymin: The minimum constant latitude line that bounds the rectangle.\nymax: The maximum constant latitude line that bounds the rectangle.",
    "description": "Returns a STRUCT that represents the bounding box for the specified geography.\nThe bounding box is the minimal rectangle that encloses the geography. The edges\nof the rectangle follow constant lines of longitude and latitude.Caveats:Returns NULL if the input is NULL or an empty geography.\nThe bounding box might cross the antimeridian if this allows for a smaller\nrectangle. In this case, the bounding box has one of its longitudinal bounds\noutside of the [-180, 180] range, so that xmin is smaller than the eastmost\nvalue xmax."
  },
  {
    "name": "ST_BUFFER",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "GEOGRAPHY",
    "description": "Returns a GEOGRAPHY that represents the buffer around the input GEOGRAPHY.\nThis function is similar to ST_BUFFERWITHTOLERANCE,\nbut you specify the number of segments instead of providing tolerance to\ndetermine how much the resulting geography can deviate from the ideal\nbuffer radius.geography: The input GEOGRAPHY to encircle with the buffer radius.\nbuffer_radius: DOUBLE that represents the radius of the buffer\naround the input geography. The radius is in meters. Note that polygons\ncontract when buffered with a negative buffer_radius. Polygon shells and\nholes that are contracted to a point are discarded.\nnum_seg_quarter_circle: (Optional) DOUBLE specifies the number of\nsegments that are used to approximate a quarter circle. The default value is\n8.0. Naming this argument is optional.\nendcap: (Optional) STRING allows you to specify one of two endcap\nstyles: ROUND and FLAT. The default value is ROUND. This option only\naffects the endcaps of buffered linestrings.\nside: (Optional) STRING allows you to specify one of three possibilities\nfor lines: BOTH, LEFT, and RIGHT. The default is BOTH. This option\nonly affects how linestrings are buffered.\nuse_spheroid: (Optional) BOOL determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on\nthe surface of a perfect sphere. The use_spheroid parameter\ncurrently only supports the value FALSE. The default value of\nuse_spheroid is FALSE."
  },
  {
    "name": "ST_BUFFERWITHTOLERANCE",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "The following example shows the results of ST_BUFFERWITHTOLERANCE on a point,\ngiven two different values for tolerance but with the same buffer radius of\n100. A buffered point is an approximated circle. When tolerance_meters=25,\nthe tolerance is a large percentage of the buffer radius, and therefore only\nfive segments are used to approximate a circle around the input point. When\ntolerance_meters=1, the tolerance is a much smaller percentage of the buffer\nradius, and therefore twenty-four edges are used to approximate a circle around\nthe input point.SELECT\n  -- tolerance_meters=25, or 25% of the buffer radius.\n  ST_NumPoints(ST_BufferWithTolerance(ST_GeogFromText('POINT(1 2)'), 100, 25)) AS five_sides,\n  -- tolerance_meters=1, or 1% of the buffer radius.\n  st_NumPoints(ST_BufferWithTolerance(ST_GeogFromText('POINT(100 2)'), 100, 1)) AS twenty_four_sides;\n\n+------------+-------------------+\n| five_sides | twenty_four_sides |\n+------------+-------------------+\n| 6          | 24                |\n+------------+-------------------+",
    "description": "GEOGRAPHY"
  },
  {
    "name": "ST_CENTROID",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "In the unlikely event that the centroid of a\nGEOGRAPHY cannot be defined by a single point on\nthe surface of the Earth, a deterministic but otherwise arbitrary point is\nreturned. This can only happen if the centroid is exactly at the center of the\nEarth, such as the centroid for a pair of antipodal points, and the likelihood\nof this happening is vanishingly small.",
    "description": "Returns the centroid of the input GEOGRAPHY as a\nsingle point GEOGRAPHY.The centroid of a GEOGRAPHY is the weighted\naverage of the centroids of the highest-dimensional components in the\nGEOGRAPHY. The centroid for components in each\ndimension is defined as follows:The centroid of points is the arithmetic mean of the input coordinates.\nThe centroid of linestrings is the centroid of all the edges weighted by\nlength. The centroid of each edge is the geodesic midpoint of the edge.\nThe centroid of a polygon is its center of mass.If the input GEOGRAPHY is empty, an empty\nGEOGRAPHY is returned."
  },
  {
    "name": "ST_CENTROID_AGG",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "GEOGRAPHY",
    "description": "Computes the centroid of the set of input GEOGRAPHYs\nas a single point GEOGRAPHY.The centroid over the set of input GEOGRAPHYs is\nthe weighted average of the centroid of each individual\nGEOGRAPHY. Only the\nGEOGRAPHYs with the highest dimension present in the\ninput contribute to the centroid of the entire set. For example, if\nthe input contains both GEOGRAPHYs  with lines and\nGEOGRAPHYs with only points, ST_CENTROID_AGG\nreturns the weighted average of the\nGEOGRAPHYs with lines, since those have maximal\ndimension. In this example, ST_CENTROID_AGG ignores\nGEOGRAPHYs with only points when calculating the\naggregate centroid.ST_CENTROID_AGG ignores NULL input GEOGRAPHY\nvalues.See ST_CENTROID for the non-aggregate version of\nST_CENTROID_AGG and the definition of centroid for an individual\nGEOGRAPHY value."
  },
  {
    "name": "ST_CLOSESTPOINT",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "GEOGRAPHY",
    "description": "Returns a GEOGRAPHY containing a point on\ngeography_1 with the smallest possible distance to geography_2. This implies\nthat the distance between the point returned by ST_CLOSESTPOINT and\ngeography_2 is less than or equal to the distance between any other point on\ngeography_1 and geography_2.If either of the input GEOGRAPHYs is empty,\nST_CLOSESTPOINT returns NULL.The optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.The use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE."
  },
  {
    "name": "ST_CLUSTERDBSCAN",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "The DBSCAN algorithm identifies high-density clusters of data and marks outliers\nin low-density areas of noise. Geographies passed in through geography_column\nare classified in one of three ways by the DBSCAN algorithm:Core value: A geography is a core value if it is within epsilon distance\nof minimum_geographies geographies, including itself. The core value\nstarts a new cluster, or is added to the same cluster as a core value within\nepsilon distance. Core values are grouped in a cluster together with all\nother core and border values that are within epsilon distance.\nBorder value: A geography is a border value if it is within epsilon distance\nof a core value. It is added to the same cluster as a core value within\nepsilon distance. A border value may be within epsilon distance of more\nthan one cluster. In this case, it may be arbitrarily assigned to either\ncluster and the function will produce the same result in subsequent calls.\nNoise: A geography is noise if it is neither a core nor a border value.\nNoise values are assigned to a NULL cluster. An empty\nGEOGRAPHY is always classified as noise.",
    "description": "geography_column: A column of GEOGRAPHYs that\nis clustered.\nepsilon: The epsilon that specifies the radius, measured in meters, around\na core value. Non-negative FLOAT64 value.\nminimum_geographies: Specifies the minimum number of geographies in a\nsingle cluster. Only dense input forms a cluster, otherwise it is classified\nas noise. Non-negative INT64 value."
  },
  {
    "name": "ST_CONTAINS",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "BOOL",
    "description": "Returns TRUE if no point of geography_2 is outside geography_1, and\nthe interiors intersect; returns FALSE otherwise.NOTE: A GEOGRAPHY does not contain its own\nboundary. Compare with ST_COVERS."
  },
  {
    "name": "ST_CONVEXHULL",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "GEOGRAPHY",
    "description": "Returns the convex hull for the input GEOGRAPHY.\nThe convex hull is the smallest convex GEOGRAPHY\nthat covers the input. A GEOGRAPHY is convex if\nfor every pair of points in the GEOGRAPHY,\nthe geodesic edge connecting the points are also contained in the same\nGEOGRAPHY.In most cases, the convex hull consists of a single polygon. Notable edge cases\ninclude the following:The convex hull of a single point is also a point.\nThe convex hull of two or more collinear points is a linestring as long as\nthat linestring is convex.\nIf the input GEOGRAPHY spans more than a\nhemisphere, the convex hull is the full globe. This includes any input that\ncontains a pair of antipodal points.\nST_CONVEXHULL returns NULL if the input is either NULL or the empty\nGEOGRAPHY."
  },
  {
    "name": "ST_COVEREDBY",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "BOOL",
    "description": "Returns FALSE if geography_1 or geography_2 is empty. Returns TRUE if no\npoints of geography_1 lie in the exterior of geography_2.Given two GEOGRAPHYs a and b,\nST_COVEREDBY(a, b) returns the same result as\nST_COVERS(b, a). Note the opposite order of arguments."
  },
  {
    "name": "ST_COVERS",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "BOOL",
    "description": "Returns FALSE if geography_1 or geography_2 is empty.\nReturns TRUE if no points of geography_2 lie in the exterior of geography_1."
  },
  {
    "name": "ST_DIFFERENCE",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "The underlying geometric objects that a BigQuery\nGEOGRAPHY represents correspond to a closed point\nset. Therefore, ST_DIFFERENCE is the closure of the point set difference of\ngeography_1 and geography_2. This implies that if geography_1 and\ngeography_2 intersect, then a portion of the boundary of geography_2 could\nbe in the difference.",
    "description": "Returns a GEOGRAPHY that represents the point set\ndifference of geography_1 and geography_2. Therefore, the result consists of\nthe part of geography_1 that does not intersect with geography_2.If geometry_1 is completely contained in geometry_2, then ST_DIFFERENCE\nreturns an empty GEOGRAPHY."
  },
  {
    "name": "ST_DIMENSION",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "INT64",
    "description": "Returns the dimension of the highest-dimensional element in the input\nGEOGRAPHY.The dimension of each possible element is as follows:The dimension of a point is 0.\nThe dimension of a linestring is 1.\nThe dimension of a polygon is 2.If the input GEOGRAPHY is empty, ST_DIMENSION\nreturns -1."
  },
  {
    "name": "ST_DISJOINT",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "BOOL",
    "description": "Returns TRUE if the intersection of geography_1 and geography_2 is empty,\nthat is, no point in geography_1 also appears in geography_2.ST_DISJOINT is the logical negation of ST_INTERSECTS."
  },
  {
    "name": "ST_DISTANCE",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "FLOAT64",
    "description": "Returns the shortest distance in meters between two non-empty\nGEOGRAPHYs.If either of the input GEOGRAPHYs is empty,\nST_DISTANCE returns NULL.The optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.The use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE."
  },
  {
    "name": "ST_DUMP",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "ARRAY",
    "description": "Returns an ARRAY of simple\nGEOGRAPHYs where each element is a component of\nthe input GEOGRAPHY. A simple\nGEOGRAPHY consists of a single point, linestring,\nor polygon. If the input GEOGRAPHY is simple, the\nresult is a single element. When the input\nGEOGRAPHY is a collection, ST_DUMP returns an\nARRAY with one simple\nGEOGRAPHY for each component in the collection.If dimension is provided, the function only returns\nGEOGRAPHYs of the corresponding dimension. A\ndimension of -1 is equivalent to omitting dimension."
  },
  {
    "name": "ST_DWITHIN",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "BOOL",
    "description": "Returns TRUE if the distance between at least one point in geography_1 and\none point in geography_2 is less than or equal to the distance given by the\ndistance argument; otherwise, returns FALSE. If either input\nGEOGRAPHY is empty, ST_DWithin returns FALSE. The\ngiven distance is in meters on the surface of the Earth.The optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.The use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE."
  },
  {
    "name": "ST_ENDPOINT",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "Point GEOGRAPHY",
    "description": "Returns the last point of a linestring geography as a point geography. Returns\nan error if the input is not a linestring or if the input is empty. Use the\nSAFE prefix to obtain NULL for invalid input instead of an error."
  },
  {
    "name": "ST_EQUALS",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "ST_EQUALS is not guaranteed to be a transitive function.",
    "description": "Returns TRUE if geography_1 and geography_2 represent the sameGEOGRAPHY value. More precisely, this means that\none of the following conditions holds:\n+   ST_COVERS(geography_1, geography_2) = TRUE and ST_COVERS(geography_2,\n    geography_1) = TRUE\n+   Both geography_1 and geography_2 are empty.Therefore, two GEOGRAPHYs may be equal even if the\nordering of points or vertices differ, as long as they still represent the same\ngeometric structure."
  },
  {
    "name": "ST_EXTENT",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "STRUCT<xmin FLOAT64, ymin FLOAT64, xmax FLOAT64, ymax FLOAT64>.Bounding box parts:xmin: The westmost constant longitude line that bounds the rectangle.\nxmax: The eastmost constant longitude line that bounds the rectangle.\nymin: The minimum constant latitude line that bounds the rectangle.\nymax: The maximum constant latitude line that bounds the rectangle.",
    "description": "Returns a STRUCT that represents the bounding box for the set of input\nGEOGRAPHY values. The bounding box is the minimal rectangle that encloses the\ngeography. The edges of the rectangle follow constant lines of longitude and\nlatitude.Caveats:Returns NULL if all the inputs are NULL or empty geographies.\nThe bounding box might cross the antimeridian if this allows for a smaller\nrectangle. In this case, the bounding box has one of its longitudinal bounds\noutside of the [-180, 180] range, so that xmin is smaller than the eastmost\nvalue xmax.\nIf the longitude span of the bounding box is larger than or equal to 180\ndegrees, the function returns the bounding box with the longitude range of\n[-180, 180]."
  },
  {
    "name": "ST_EXTERIORRING",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "Linestring GEOGRAPHY\nEmpty GEOGRAPHY",
    "description": "Returns a linestring geography that corresponds to the outermost ring of a\npolygon geography.If the input geography is a polygon, gets the outermost ring of the polygon\ngeography and returns the corresponding linestring.\nIf the input is the full GEOGRAPHY, returns an empty geography.\nReturns an error if the input is not a single polygon.Use the SAFE prefix to return NULL for invalid input instead of an error."
  },
  {
    "name": "ST_GEOGFROM",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "GEOGRAPHY",
    "description": "Converts an expression for a STRING or BYTES value into a\nGEOGRAPHY value.If expression represents a STRING value, it must be a valid\nGEOGRAPHY representation in one of the following formats:WKT format. To learn more about this format and the requirements to use it,\nsee ST_GEOGFROMTEXT.\nWKB in hexadecimal text format. To learn more about this format and the\nrequirements to use it, see ST_GEOGFROMWKB.\nGeoJSON format. To learn more about this format and the\nrequirements to use it, see ST_GEOGFROMGEOJSON.If expression represents a BYTES value, it must be a valid GEOGRAPHY\nbinary expression in WKB format. To learn more about this format and the\nrequirements to use it, see ST_GEOGFROMWKB.If expression is NULL, the output is NULL."
  },
  {
    "name": "ST_GEOGFROMGEOJSON",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "The input is subject to the following constraints:ST_GEOGFROMGEOJSON only accepts JSON geometry fragments and cannot be used\nto ingest a whole JSON document.\nThe input JSON fragment must consist of a GeoJSON geometry type, which\nincludes Point, MultiPoint, LineString, MultiLineString, Polygon,\nMultiPolygon, and GeometryCollection. Any other GeoJSON type such as\nFeature or FeatureCollection will result in an error.\nA position in the coordinates member of a GeoJSON geometry type must\nconsist of exactly two elements. The first is the longitude and the second\nis the latitude. Therefore, ST_GEOGFROMGEOJSON does not support the\noptional third element for a position in the coordinates member.",
    "description": "Returns a GEOGRAPHY value that corresponds to the\ninput GeoJSON representation.ST_GEOGFROMGEOJSON accepts input that is RFC 7946\ncompliant.If the parameter make_valid is set to TRUE, the function attempts to repair\npolygons that don't conform to Open Geospatial Consortium semantics.\nThis parameter uses named argument syntax, and should be specified using\nmake_valid => argument_value syntax.A BigQuery GEOGRAPHY has spherical\ngeodesic edges, whereas a GeoJSON Geometry object explicitly has planar edges.\nTo convert between these two types of edges, BigQuery adds additional\npoints to the line where necessary so that the resulting sequence of edges\nremains within 10 meters of the original edge.See ST_ASGEOJSON to format a\nGEOGRAPHY as GeoJSON."
  },
  {
    "name": "ST_GEOGFROMTEXT",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "All input edges are assumed to be spherical geodesics, and not planar\nstraight lines. For reading data in a planar projection, consider using\nST_GEOGFROMGEOJSON.\nFor more information on the differences between spherical geodesics and\nplanar lines, see\nCoordinate systems and edges.\nThe function does not support three-dimensional geometries that have a Z\nsuffix, nor does it support linear referencing system geometries with an M\nsuffix.\nThe function only supports geometry primitives and multipart geometries. In\nparticular it supports only Point, MultiPoint, LineString, MultiLineString,\nPolygon, MultiPolygon, and GeometryCollection.",
    "description": "Returns a GEOGRAPHY value that corresponds to the\ninput WKT representation.This function supports an optional parameter of type\nBOOL, oriented. If this parameter is set to\nTRUE, any polygons in the input are assumed to be oriented as follows:\nif someone walks along the boundary of the polygon in the order of\nthe input vertices, the interior of the polygon is on the left. This allows\nWKT to represent polygons larger than a hemisphere. If oriented is FALSE or\nomitted, this function returns the polygon with the smaller area.\nSee also ST_MAKEPOLYGONORIENTED which is similar\nto ST_GEOGFROMTEXT with oriented=TRUE.To format GEOGRAPHY as WKT, use\nST_ASTEXT."
  },
  {
    "name": "ST_GEOGFROMWKB",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "All input edges are assumed to be spherical geodesics, and not planar straight\nlines. For reading data in a planar projection, consider using\nST_GEOGFROMGEOJSON.",
    "description": "Converts an expression for a hexadecimal-text STRING or BYTES\nvalue into a GEOGRAPHY value. The expression must be in\nWKB format.To format GEOGRAPHY as WKB, use\nST_ASBINARY."
  },
  {
    "name": "ST_GEOGPOINT",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "Latitudes must be in the range [-90, 90]. Latitudes outside this range\nwill result in an error.\nLongitudes outside the range [-180, 180] are allowed; ST_GEOGPOINT uses\nthe input longitude modulo 360 to obtain a longitude within [-180, 180].",
    "description": "Creates a GEOGRAPHY with a single point.\nST_GEOGPOINT creates a point from the specified\nFLOAT64 longitude and latitude parameters and\nreturns that point in a GEOGRAPHY value."
  },
  {
    "name": "ST_GEOGPOINTFROMGEOHASH",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "GEOGRAPHY",
    "description": "Returns a GEOGRAPHY value that corresponds to a\npoint in the middle of a bounding box defined in the GeoHash."
  },
  {
    "name": "ST_GEOHASH",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "STRING",
    "description": "Takes a single-point GEOGRAPHY and returns a GeoHash\nrepresentation of that GEOGRAPHY object.geography_expression: Represents a GEOGRAPHY object. Only a GEOGRAPHY\nobject that represents a single point is supported. If ST_GEOHASH is used\nover an empty GEOGRAPHY object, returns NULL.\nmaxchars: This optional INT64 parameter specifies the maximum number of\ncharacters the hash will contain. Fewer characters corresponds to lower\nprecision (or, described differently, to a bigger bounding box). maxchars\ndefaults to 20 if not explicitly specified. A valid maxchars value is 1\nto 20. Any value below or above is considered unspecified and the default of\n20 is used."
  },
  {
    "name": "ST_GEOMETRYTYPE",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "STRING",
    "description": "Returns the Open Geospatial Consortium (OGC) geometry type that\ndescribes the input GEOGRAPHY as a STRING. The OGC geometry type matches the\ntypes that are used in WKT and GeoJSON formats and\nprinted for ST_ASTEXT and ST_ASGEOJSON.\nST_GEOMETRYTYPE returns the OGC geometry type with the \"ST_\" prefix.ST_GEOMETRYTYPE returns the following given the type on the input:Single point geography: Returns ST_Point.\nCollection of only points: Returns ST_MultiPoint.\nSingle linestring geography: Returns ST_LineString.\nCollection of only linestrings: Returns ST_MultiLineString.\nSingle polygon geography: Returns ST_Polygon.\nCollection of only polygons: Returns ST_MultiPolygon.\nCollection with elements of different dimensions, or the input is the empty\ngeography: Returns ST_GeometryCollection."
  },
  {
    "name": "ST_INTERIORRINGS",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "ARRAY",
    "description": "Returns an array of linestring geographies that corresponds to the interior\nrings of a polygon geography. Each interior ring is the border of a hole within\nthe input polygon.If the input geography is a polygon, excludes the outermost ring of the\npolygon geography and returns the linestrings corresponding to the interior\nrings.\nIf the input is the full GEOGRAPHY, returns an empty array.\nIf the input polygon has no holes, returns an empty array.\nReturns an error if the input is not a single polygon.Use the SAFE prefix to return NULL for invalid input instead of an error."
  },
  {
    "name": "ST_INTERSECTION",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "GEOGRAPHY",
    "description": "Returns a GEOGRAPHY that represents the point set\nintersection of the two input GEOGRAPHYs. Thus,\nevery point in the intersection appears in both geography_1 and geography_2.If the two input GEOGRAPHYs are disjoint, that is,\nthere are no points that appear in both input geometry_1 and geometry_2,\nthen an empty GEOGRAPHY is returned.See ST_INTERSECTS, ST_DISJOINT for related\npredicate functions."
  },
  {
    "name": "ST_INTERSECTS",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "BOOL",
    "description": "Returns TRUE if the point set intersection of geography_1 and geography_2\nis non-empty. Thus, this function returns TRUE if there is at least one point\nthat appears in both input GEOGRAPHYs.If ST_INTERSECTS returns TRUE, it implies that ST_DISJOINT\nreturns FALSE."
  },
  {
    "name": "ST_INTERSECTSBOX",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "The input arguments are subject to the following constraints:Latitudes should be in the [-90, 90] degree range.\nLongitudes should follow either of the following rules:\nBoth longitudes are in the [-180, 180] degree range.\nOne of the longitudes is in the [-180, 180] degree range, and\nlng2 - lng1 is in the [0, 360] interval.",
    "description": "Returns TRUE if geography intersects the rectangle between [lng1, lng2]\nand [lat1, lat2]. The edges of the rectangle follow constant lines of\nlongitude and latitude. lng1 and lng2 specify the westmost and eastmost\nconstant longitude lines that bound the rectangle, and lat1 and lat2 specify\nthe minimum and maximum constant latitude lines that bound the rectangle.Specify all longitude and latitude arguments in degrees."
  },
  {
    "name": "ST_ISCLOSED",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "BOOL",
    "description": "Returns TRUE for a non-empty Geography, where each element in the Geography\nhas an empty boundary. The boundary for each element can be defined with\nST_BOUNDARY.A Point is closed.\nA LineString is closed if the start and end points of the LineString are\nthe same.\nA Polygon is closed only if it is a full polygon.\nA Collection is closed if and only if every element in the collection is\nclosed.An empty GEOGRAPHY is not closed."
  },
  {
    "name": "ST_ISCOLLECTION",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "BOOL",
    "description": "Returns TRUE if the total number of points, linestrings, and polygons is\ngreater than one.An empty GEOGRAPHY is not a collection."
  },
  {
    "name": "ST_ISEMPTY",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "BOOL",
    "description": "Returns TRUE if the given GEOGRAPHY is empty; that is, the GEOGRAPHY does\nnot contain any points, lines, or polygons.NOTE: A BigQuery empty GEOGRAPHY is not associated with a particular\ngeometry shape. For example, the results of expressions ST_GEOGFROMTEXT('POINT\nEMPTY') and ST_GEOGFROMTEXT('GEOMETRYCOLLECTION EMPTY') are identical."
  },
  {
    "name": "ST_ISRING",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "BOOL",
    "description": "Returns TRUE if the input GEOGRAPHY is a LineString and if the\nLineString is both ST_ISCLOSED and\nsimple. A LineString is considered simple if it does not pass through the\nsame point twice (with the exception of the start and endpoint, which may\noverlap to form a ring).An empty GEOGRAPHY is not a ring."
  },
  {
    "name": "ST_LENGTH",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "FLOAT64",
    "description": "Returns the total length in meters of the lines in the input\nGEOGRAPHY.If geography_expression is a point or a polygon, returns zero. If\ngeography_expression is a collection, returns the length of the lines in the\ncollection; if the collection does not contain lines, returns zero.The optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.The use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE."
  },
  {
    "name": "ST_MAKELINE",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "Every edge must span strictly less than 180 degrees.NOTE: BigQuery's snapping process may discard sufficiently short edges\nand snap the two endpoints together. For instance, if two input\nGEOGRAPHYs each contain a point and the two points\nare separated by a distance less than the snap radius, the points will be\nsnapped together. In such a case the result will be a\nGEOGRAPHY with exactly one point.",
    "description": "Creates a GEOGRAPHY with a single linestring by\nconcatenating the point or line vertices of each of the input\nGEOGRAPHYs in the order they are given.ST_MAKELINE comes in two variants. For the first variant, input must be two\nGEOGRAPHYs. For the second, input must be an\nARRAY of type\nGEOGRAPHY. In either variant, each input\nGEOGRAPHY must consist of one of the following\nvalues:Exactly one point.\nExactly one linestring.For the first variant of ST_MAKELINE, if either input\nGEOGRAPHY is NULL, ST_MAKELINE returns NULL.\nFor the second variant, if input ARRAY or any\nelement in the input ARRAY is NULL, ST_MAKELINE\nreturns NULL."
  },
  {
    "name": "ST_MAKEPOLYGON",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "Together, the input rings must form a valid polygon:The polygon shell must cover each of the polygon holes.\nThere can be only one polygon shell (which has to be the first input ring).\nThis implies that polygon holes cannot be nested.\nPolygon rings may only intersect in a vertex on the boundary of both rings.Every edge must span strictly less than 180 degrees.Each polygon ring divides the sphere into two regions. The first input linesting\nto ST_MAKEPOLYGON forms the polygon shell, and the interior is chosen to be\nthe smaller of the two regions. Each subsequent input linestring specifies a\npolygon hole, so the interior of the polygon is already well-defined. In order\nto define a polygon shell such that the interior of the polygon is the larger of\nthe two regions, see ST_MAKEPOLYGONORIENTED.NOTE: BigQuery's snapping process may discard sufficiently short edges\nand snap the two endpoints together. Hence, when vertices are snapped together,\nit is possible that a polygon hole that is sufficiently small may disappear, or\nthe output GEOGRAPHY may contain only a line or a\npoint.",
    "description": "Creates a GEOGRAPHY containing a single polygon\nfrom linestring inputs, where each input linestring is used to construct a\npolygon ring.ST_MAKEPOLYGON comes in two variants. For the first variant, the input\nlinestring is provided by a single GEOGRAPHY\ncontaining exactly one linestring. For the second variant, the input consists of\na single GEOGRAPHY and an array of\nGEOGRAPHYs, each containing exactly one linestring.\nThe first GEOGRAPHY in either variant is used to\nconstruct the polygon shell. Additional\nGEOGRAPHYs provided in the input\nARRAY specify a polygon hole. For every input\nGEOGRAPHY containing\nexactly one linestring, the following must be true:The linestring must consist of at least three distinct vertices.\nThe linestring must be closed: that is, the first and last vertex have to be\nthe same. If the first and last vertex differ, the function constructs a\nfinal edge from the first vertex to the last.For the first variant of ST_MAKEPOLYGON, if either input\nGEOGRAPHY is NULL, ST_MAKEPOLYGON returns\nNULL. For the second variant, if input ARRAY\nor any element in the ARRAY is NULL,\nST_MAKEPOLYGON returns NULL.NOTE: ST_MAKEPOLYGON accepts an empty GEOGRAPHY\nas input. ST_MAKEPOLYGON interprets an empty\nGEOGRAPHY as having an empty linestring, which will\ncreate a full loop: that is, a polygon that covers the entire Earth."
  },
  {
    "name": "ST_MAKEPOLYGONORIENTED",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "Together, the input rings must form a valid polygon:The polygon shell must cover each of the polygon holes.\nThere must be only one polygon shell, which must to be the first input ring.\nThis implies that polygon holes cannot be nested.\nPolygon rings may only intersect in a vertex on the boundary of both rings.Every edge must span strictly less than 180 degrees.ST_MAKEPOLYGONORIENTED relies on the ordering of the input vertices of each\nlinestring to determine the orientation of the polygon. This applies to the\npolygon shell and any polygon holes. ST_MAKEPOLYGONORIENTED expects all\npolygon holes to have the opposite orientation of the shell. See\nST_MAKEPOLYGON for an alternate polygon constructor, and\nother constraints on building a valid polygon.NOTE: Due to BigQuery's snapping process, edges with a sufficiently\nshort length will be discarded and the two endpoints will be snapped to a single\npoint. Therefore, it is possible that vertices in a linestring may be snapped\ntogether such that one or more edge disappears. Hence, it is possible that a\npolygon hole that is sufficiently small may disappear, or the resulting\nGEOGRAPHY may contain only a line or a point.",
    "description": "Like ST_MAKEPOLYGON, but the vertex ordering of each input linestring\ndetermines the orientation of each polygon ring. The orientation of a polygon\nring defines the interior of the polygon as follows: if someone walks along the\nboundary of the polygon in the order of the input vertices, the interior of the\npolygon is on the left. This applies for each polygon ring provided.This variant of the polygon constructor is more flexible since\nST_MAKEPOLYGONORIENTED can construct a polygon such that the interior is on\neither side of the polygon ring. However, proper orientation of polygon rings is\ncritical in order to construct the desired polygon.If the input ARRAY or any element in the\nARRAY is NULL, ST_MAKEPOLYGONORIENTED\nreturns NULL.NOTE: The input argument for ST_MAKEPOLYGONORIENTED may contain an empty\nGEOGRAPHY. ST_MAKEPOLYGONORIENTED\ninterprets an empty GEOGRAPHY as having an empty\nlinestring, which will create a full loop: that is, a polygon that covers the\nentire Earth."
  },
  {
    "name": "ST_NUMGEOMETRIES",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "INT64",
    "description": "Returns the number of geometries in the input GEOGRAPHY. For a single point,\nlinestring, or polygon, ST_NUMGEOMETRIES returns 1. For any collection of\ngeometries, ST_NUMGEOMETRIES returns the number of geometries making up the\ncollection. ST_NUMGEOMETRIES returns 0 if the input is the empty\nGEOGRAPHY."
  },
  {
    "name": "ST_NUMPOINTS",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "INT64",
    "description": "Returns the number of vertices in the input\nGEOGRAPHY. This includes the number of points, the\nnumber of linestring vertices, and the number of polygon vertices.NOTE: The first and last vertex of a polygon ring are counted as distinct\nvertices."
  },
  {
    "name": "ST_PERIMETER",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "FLOAT64",
    "description": "Returns the length in meters of the boundary of the polygons in the input\nGEOGRAPHY.If geography_expression is a point or a line, returns zero. If\ngeography_expression is a collection, returns the perimeter of the polygons\nin the collection; if the collection does not contain polygons, returns zero.The optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.The use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE."
  },
  {
    "name": "ST_POINTN",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "Point GEOGRAPHY",
    "description": "Returns the Nth point of a linestring geography as a point geography, where N is\nthe index. The index is 1-based. Negative values are counted backwards from the\nend of the linestring, so that -1 is the last point. Returns an error if the\ninput is not a linestring, if the input is empty, or if there is no vertex at\nthe given index. Use the SAFE prefix to obtain NULL for invalid input\ninstead of an error."
  },
  {
    "name": "ST_SIMPLIFY",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "For ST_SIMPLIFY to have any effect, tolerance_meters must be non-zero.ST_SIMPLIFY returns an error if the tolerance specified by tolerance_meters\nis one of the following:A negative tolerance.\nGreater than ~7800 kilometers.",
    "description": "Returns a simplified version of geography, the given input\nGEOGRAPHY. The input\nGEOGRAPHY is simplified by replacing nearly straight\nchains of short edges with a single long edge. The input geography will not\nchange by more than the tolerance specified by tolerance_meters. Thus,\nsimplified edges are guaranteed to pass within tolerance_meters of the\noriginal positions of all vertices that were removed from that edge. The given\ntolerance_meters is in meters on the surface of the Earth.Note that ST_SIMPLIFY preserves topological relationships, which means that\nno new crossing edges will be created and the output will be valid. For a large\nenough tolerance, adjacent shapes may collapse into a single object, or a shape\ncould be simplified to a shape with a smaller dimension."
  },
  {
    "name": "ST_SNAPTOGRID",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "Arbitrary grid sizes are not supported. The grid_size parameter is rounded so\nthat it is of the form 10^n, where -10 < n < 0.",
    "description": "Returns the input GEOGRAPHY, where each vertex has\nbeen snapped to a longitude/latitude grid. The grid size is determined by the\ngrid_size parameter which is given in degrees."
  },
  {
    "name": "ST_STARTPOINT",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "Point GEOGRAPHY",
    "description": "Returns the first point of a linestring geography as a point geography. Returns\nan error if the input is not a linestring or if the input is empty. Use the\nSAFE prefix to obtain NULL for invalid input instead of an error."
  },
  {
    "name": "ST_TOUCHES",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "BOOL",
    "description": "Returns TRUE provided the following two conditions are satisfied:geography_1 intersects geography_2.\nThe interior of geography_1 and the interior of geography_2 are\ndisjoint."
  },
  {
    "name": "ST_UNION",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "GEOGRAPHY",
    "description": "Returns a GEOGRAPHY that represents the point set\nunion of all input GEOGRAPHYs.ST_UNION comes in two variants. For the first variant, input must be two\nGEOGRAPHYs. For the second, the input is an\nARRAY of type GEOGRAPHY.For the first variant of ST_UNION, if an input\nGEOGRAPHY is NULL, ST_UNION returns NULL.\nFor the second variant, if the input ARRAY value\nis NULL, ST_UNION returns NULL.\nFor a non-NULL input ARRAY, the union is computed\nand NULL elements are ignored so that they do not affect the output.See ST_UNION_AGG for the aggregate version of ST_UNION."
  },
  {
    "name": "ST_UNION_AGG",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "GEOGRAPHY",
    "description": "Returns a GEOGRAPHY that represents the point set\nunion of all input GEOGRAPHYs.ST_UNION_AGG ignores NULL input GEOGRAPHY values.See ST_UNION for the non-aggregate version of ST_UNION_AGG."
  },
  {
    "name": "ST_WITHIN",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "BOOL",
    "description": "Returns TRUE if no point of geography_1 is outside of geography_2 and\nthe interiors of geography_1 and geography_2 intersect.Given two geographies a and b, ST_WITHIN(a, b) returns the same result\nas ST_CONTAINS(b, a). Note the opposite order of arguments."
  },
  {
    "name": "ST_X",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "FLOAT64",
    "description": "Returns the longitude in degrees of the single-point input\nGEOGRAPHY.For any input GEOGRAPHY that is not a single point,\nincluding an empty GEOGRAPHY, ST_X returns an\nerror. Use the SAFE. prefix to obtain NULL."
  },
  {
    "name": "ST_Y",
    "arguments": [],
    "category": "Geography functions",
    "return_type": "FLOAT64",
    "description": "Returns the latitude in degrees of the single-point input\nGEOGRAPHY.For any input GEOGRAPHY that is not a single point,\nincluding an empty GEOGRAPHY, ST_Y returns an\nerror. Use the SAFE. prefix to return NULL instead."
  },
  {
    "name": "SESSION_USER",
    "arguments": [],
    "category": "Security functions",
    "return_type": "STRING",
    "description": "Returns the email address of the user that is running the query."
  },
  {
    "name": "GENERATE_UUID",
    "arguments": [],
    "category": "Utility functions",
    "return_type": "STRING",
    "description": "Returns a random universally unique identifier (UUID) as a STRING.\nThe returned STRING consists of 32 hexadecimal\ndigits in five groups separated by hyphens in the form 8-4-4-4-12. The\nhexadecimal digits represent 122 random bits and 6 fixed bits, in compliance\nwith RFC 4122 section 4.4.\nThe returned STRING is lowercase."
  },
  {
    "name": "NET.IP_FROM_STRING",
    "arguments": [],
    "category": "Net functions",
    "return_type": "BYTES",
    "description": "Converts an IPv4 or IPv6 address from text (STRING) format to binary (BYTES)\nformat in network byte order.This function supports the following formats for addr_str:IPv4: Dotted-quad format. For example, 10.1.2.3.\nIPv6: Colon-separated format. For example,\n1234:5678:90ab:cdef:1234:5678:90ab:cdef. For more examples, see the\nIP Version 6 Addressing Architecture.This function does not support CIDR notation, such as 10.1.2.3/32.If this function receives a NULL input, it returns NULL. If the input is\nconsidered invalid, an OUT_OF_RANGE error occurs."
  },
  {
    "name": "NET.SAFE_IP_FROM_STRING",
    "arguments": [],
    "category": "Net functions",
    "return_type": "BYTES",
    "description": "Similar to NET.IP_FROM_STRING, but returns NULL\ninstead of throwing an error if the input is invalid."
  },
  {
    "name": "NET.IP_TO_STRING",
    "arguments": [],
    "category": "Net functions",
    "return_type": "STRING",
    "description": "If the input is 4 bytes, this function returns an IPv4 address as a STRING. If\nthe input is 16 bytes, it returns an IPv6 address as a STRING.If this function receives a NULL input, it returns NULL. If the input has\na length different from 4 or 16, an OUT_OF_RANGE error occurs."
  },
  {
    "name": "NET.IP_NET_MASK",
    "arguments": [],
    "category": "Net functions",
    "return_type": "BYTES",
    "description": "Returns a network mask: a byte sequence with length equal to num_output_bytes,\nwhere the first prefix_length bits are set to 1 and the other bits are set to\n0. num_output_bytes and prefix_length are INT64.\nThis function throws an error if num_output_bytes is not 4 (for IPv4) or 16\n(for IPv6). It also throws an error if prefix_length is negative or greater\nthan 8 * num_output_bytes."
  },
  {
    "name": "NET.IP_TRUNC",
    "arguments": [],
    "category": "Net functions",
    "return_type": "BYTES",
    "description": "This function throws an error if LENGTH(addr_bin) is not 4 or 16, or if\nprefix_len is negative or greater than LENGTH(addr_bin) * 8."
  },
  {
    "name": "NET.IPV4_FROM_INT64",
    "arguments": [],
    "category": "Net functions",
    "return_type": "BYTES",
    "description": "Converts an IPv4 address from integer format to binary (BYTES) format in network\nbyte order. In the integer input, the least significant bit of the IP address is\nstored in the least significant bit of the integer, regardless of host or client\narchitecture. For example, 1 means 0.0.0.1, and 0x1FF means 0.0.1.255.This function checks that either all the most significant 32 bits are 0, or all\nthe most significant 33 bits are 1 (sign-extended from a 32-bit integer).\nIn other words, the input should be in the range [-0x80000000, 0xFFFFFFFF];\notherwise, this function throws an error.This function does not support IPv6."
  },
  {
    "name": "NET.IPV4_TO_INT64",
    "arguments": [],
    "category": "Net functions",
    "return_type": "INT64",
    "description": "Converts an IPv4 address from binary (BYTES) format in network byte order to\ninteger format. In the integer output, the least significant bit of the IP\naddress is stored in the least significant bit of the integer, regardless of\nhost or client architecture. For example, 1 means 0.0.0.1, and 0x1FF means\n0.0.1.255. The output is in the range [0, 0xFFFFFFFF].If the input length is not 4, this function throws an error.This function does not support IPv6."
  },
  {
    "name": "NET.HOST",
    "arguments": [],
    "category": "Net functions",
    "return_type": "STRING",
    "description": "Takes a URL as a STRING and returns the host as a STRING. For best results, URL\nvalues should comply with the format as defined by\nRFC 3986. If the URL value does not comply with RFC 3986 formatting,\nthis function makes a best effort to parse the input and return a relevant\nresult. If the function cannot parse the input, it\nreturns NULL.Note: The function does not perform any normalization."
  },
  {
    "name": "NET.PUBLIC_SUFFIX",
    "arguments": [],
    "category": "Net functions",
    "return_type": "STRING",
    "description": "Takes a URL as a STRING and returns the public suffix (such as com, org,\nor net) as a STRING. A public suffix is an ICANN domain registered at\npublicsuffix.org. For best results, URL values\nshould comply with the format as defined by\nRFC 3986. If the URL value does not comply\nwith RFC 3986 formatting, this function makes a best effort to parse the input\nand return a relevant result.This function returns NULL if any of the following is true:It cannot parse the host from the input;\nThe parsed host contains adjacent dots in the middle (not leading or trailing);\nThe parsed host does not contain any public suffix.Before looking up the public suffix, this function temporarily normalizes the\nhost by converting upper case English letters to lower case and encoding all\nnon-ASCII characters with Punycode.\nThe function then returns the public suffix as part of the original host instead\nof the normalized host.Note: The function does not perform\nUnicode normalization.Note: The public suffix data at\npublicsuffix.org also contains\nprivate domains. This function ignores the private domains.Note: The public suffix data may change over time.\nConsequently, input that produces a NULL result now may produce a non-NULL value\nin the future."
  },
  {
    "name": "NET.REG_DOMAIN",
    "arguments": [],
    "category": "Net functions",
    "return_type": "STRING",
    "description": "Takes a URL as a STRING and returns the registered or registerable domain (the\npublic suffix plus one preceding label), as a\nSTRING. For best results, URL values should comply with the format as defined by\nRFC 3986. If the URL value does not comply with RFC 3986 formatting,\nthis function makes a best effort to parse the input and return a relevant\nresult.This function returns NULL if any of the following is true:It cannot parse the host from the input;\nThe parsed host contains adjacent dots in the middle (not leading or trailing);\nThe parsed host does not contain any public suffix;\nThe parsed host contains only a public suffix without any preceding label.Before looking up the public suffix, this function temporarily normalizes the\nhost by converting upper case English letters to lowercase and encoding all\nnon-ASCII characters with Punycode. The function then returns\nthe registered or registerable domain as part of the original host instead of\nthe normalized host.Note: The function does not perform\nUnicode normalization.Note: The public suffix data at\npublicsuffix.org also contains\nprivate domains. This function does not treat a private domain as a public\nsuffix. For example, if \"us.com\" is a private domain in the public suffix data,\nNET.REG_DOMAIN(\"foo.us.com\") returns \"us.com\" (the public suffix \"com\" plus\nthe preceding label \"us\") rather than \"foo.us.com\" (the private domain \"us.com\"\nplus the preceding label \"foo\").Note: The public suffix data may change over time.\nConsequently, input that produces a NULL result now may produce a non-NULL value\nin the future."
  },
  {
    "name": "ERROR",
    "arguments": [],
    "category": "Debugging functions",
    "return_type": "BigQuery infers the return type in context.",
    "description": "Returns an error. The error_message argument is a STRING.BigQuery treats ERROR in the same way as any expression that may\nresult in an error: there is no special guarantee of evaluation order."
  },
  {
    "name": "KEYS.NEW_KEYSET",
    "arguments": [],
    "category": "AEAD encryption functions",
    "return_type": "BYTES",
    "description": "Returns a serialized keyset containing a new key based on key_type. The\nreturned keyset is a serialized BYTES\nrepresentation of\ngoogle.crypto.tink.Keyset\nthat contains a primary cryptographic key and no additional keys. You can use\nthe keyset with the AEAD.ENCRYPT, AEAD.DECRYPT_BYTES, and\nAEAD.DECRYPT_STRING functions for encryption and decryption, as well as with\nthe KEYS group of key- and keyset-related functions.key_type is a STRING literal representation of the type of key to create.\nkey_type cannot be NULL. key_type can be:AEAD_AES_GCM_256: Creates a 256-bit key with the pseudo-random number\ngenerator provided by boringSSL. The key uses AES-GCM for\nencryption and decryption operations.\nDETERMINISTIC_AEAD_AES_SIV_CMAC_256:\nCreates a 512-bit AES-SIV-CMAC key, which contains a 256-bit AES-CTR key\nand 256-bit AES-CMAC key. The AES-SIV-CMAC key is created with the\npseudo-random number generator provided by boringSSL. The key\nuses AES-SIV for encryption and decryption operations."
  },
  {
    "name": "KEYS.ADD_KEY_FROM_RAW_BYTES",
    "arguments": [],
    "category": "AEAD encryption functions",
    "return_type": "BYTES",
    "description": "Returns a serialized keyset as BYTES with the\naddition of a key to keyset based on key_type and raw_key_bytes.The primary cryptographic key remains the same as in keyset. The expected\nlength of raw_key_bytes depends on the value of key_type. The following are\nsupported key_types:'AES_CBC_PKCS': Creates a key for AES decryption using cipher block chaining\nand PKCS padding. raw_key_bytes is expected to be a raw key\nBYTES value of length 16, 24, or 32; these\nlengths have sizes of 128, 192, and 256 bits, respectively. BigQuery\nAEAD functions do not support keys of these types for encryption; instead,\nprefer 'AEAD_AES_GCM_256' or 'AES_GCM' keys.\n'AES_GCM': Creates a key for AES decryption or encryption using\nGalois/Counter Mode.\nraw_key_bytes must be a raw key BYTES\nvalue of length 16 or 32; these lengths have sizes of 128 and 256 bits,\nrespectively. When keys of this type are inputs to AEAD.ENCRYPT, the output\nciphertext does not have a Tink-specific prefix indicating which key was\nused as input."
  },
  {
    "name": "AEAD.DECRYPT_BYTES",
    "arguments": [],
    "category": "AEAD encryption functions",
    "return_type": "BYTES",
    "description": "Uses the matching key from keyset to decrypt ciphertext and verifies the\nintegrity of the data using additional_data. Returns an error if decryption or\nverification fails.keyset is a serialized BYTES value returned by one of the\nKEYS functions or a STRUCT returned by\nKEYS.KEYSET_CHAIN. keyset must contain the key that was used to\nencrypt ciphertext, and the key must be in an 'ENABLED' state, or else the\nfunction returns an error. AEAD.DECRYPT_BYTES identifies the matching key\nin keyset by finding the key with the key ID that matches the one encrypted in\nciphertext.ciphertext is a BYTES value that is the result of\na call to AEAD.ENCRYPT where the input plaintext was of type\nBYTES.If ciphertext includes an initialization vector (IV),\nit should be the first bytes of ciphertext. If ciphertext includes an\nauthentication tag, it should be the last bytes of ciphertext. If the\nIV and authentic tag are one (SIV), it should be the first bytes of\nciphertext. The IV and authentication tag commonly require 16 bytes, but may\nvary in size.additional_data is a STRING or\nBYTES value that ensures the authenticity and\nintegrity of the encrypted data. This function casts any\nSTRING value to BYTES.\nThis must be the same as the additional_data provided to AEAD.ENCRYPT to\nencrypt ciphertext, ignoring its type, or else the function returns an error."
  },
  {
    "name": "AEAD.DECRYPT_STRING",
    "arguments": [],
    "category": "AEAD encryption functions",
    "return_type": "STRING",
    "description": "Like AEAD.DECRYPT_BYTES, but where plaintext is\nof type STRING."
  },
  {
    "name": "AEAD.ENCRYPT",
    "arguments": [],
    "category": "AEAD encryption functions",
    "return_type": "BYTES",
    "description": "Encrypts plaintext using the primary cryptographic key in keyset. The\nalgorithm of the primary key must be AEAD_AES_GCM_256. Incorporates\nadditional_data into the returned ciphertext. Returns NULL if any input is\nNULL.keyset is a serialized BYTES value returned by one of the\nKEYS functions or a STRUCT returned by\nKEYS.KEYSET_CHAIN.plaintext is the STRING or\nBYTES value to be encrypted.additional_data is a STRING or\nBYTES value to incorporate into the returned\nciphertext. plaintext and additional_data must be of the same type.\nAEAD.ENCRYPT(keyset, string1, string2) is equivalent to\nAEAD.ENCRYPT(keyset, CAST(string1 AS BYTES), CAST(string2 AS BYTES)).The output is ciphertext BYTES. The ciphertext contains a\nTink-specific prefix indicating the key used to perform the encryption."
  },
  {
    "name": "DETERMINISTIC_DECRYPT_BYTES",
    "arguments": [],
    "category": "AEAD encryption functions",
    "return_type": "BYTES",
    "description": "Uses the matching key from keyset to decrypt ciphertext and verifies the\nintegrity of the data using additional_data. Returns an error if decryption\nfails.keyset is a serialized BYTES value or a STRUCT\nvalue returned by one of the KEYS functions. keyset must contain\nthe key that was used to encrypt ciphertext, the key must be in an 'ENABLED'\nstate, and the key must be of type DETERMINISTIC_AEAD_AES_SIV_CMAC_256, or\nelse the function returns an error. DETERMINISTIC_DECRYPT_BYTES identifies the\nmatching key in keyset by finding the key with the key ID that matches the one\nencrypted in ciphertext.ciphertext is a BYTES value that is the result of a call to\nDETERMINISTIC_ENCRYPT where the input plaintext was of type BYTES.The ciphertext must follow Tink's wire format. The first\nbyte of ciphertext should contain a Tink key version followed by a 4 byte key\nhint. If ciphertext includes an initialization vector (IV), it should be the\nnext bytes of ciphertext. If ciphertext includes an authentication tag, it\nshould be the last bytes of ciphertext. If the IV and authentic tag are one\n(SIV), it should be the first bytes of ciphertext. The IV and authentication\ntag commonly require 16 bytes, but may vary in size.additional_data is a STRING or BYTES value that binds the ciphertext to\nits context. This forces the ciphertext to be decrypted in the same context\nwhich it was encrypted. This function casts any STRING value to BYTES. This\nmust be the same as the additional_data provided to DETERMINISTIC_ENCRYPT to\nencrypt ciphertext, ignoring its type, or else the function returns an error."
  },
  {
    "name": "DETERMINISTIC_DECRYPT_STRING",
    "arguments": [],
    "category": "AEAD encryption functions",
    "return_type": "STRING",
    "description": "Like DETERMINISTIC_DECRYPT_BYTES, but where\nplaintext is of type STRING."
  },
  {
    "name": "DETERMINISTIC_ENCRYPT",
    "arguments": [],
    "category": "AEAD encryption functions",
    "return_type": "BYTES",
    "description": "Encrypts plaintext using the primary cryptographic key in keyset using\ndeterministic AEAD. The algorithm of the primary key must\nbe DETERMINISTIC_AEAD_AES_SIV_CMAC_256. Incorporates additional_data into\nthe returned ciphertext. Returns NULL if any input is NULL.keyset is a serialized BYTES value or a STRUCT\nvalue returned by one of the KEYS functions.plaintext is the STRING or BYTES value to be encrypted.additional_data is a STRING or BYTES value to incorporate into the\nreturned ciphertext. plaintext and additional_data must be of the same type.\nDETERMINISTIC_ENCRYPT(keyset, string1, string2) is equivalent to\nDETERMINISTIC_ENCRYPT(keyset, CAST(string1 AS BYTES), CAST(string2 AS BYTES)).The output is ciphertext BYTES. The ciphertext contains a\nTink-specific prefix indicating the key used to perform the encryption.\nGiven an identical keyset and plaintext, this function returns the same\nciphertext each time it is invoked (including across queries)."
  },
  {
    "name": "KEYS.KEYSET_CHAIN",
    "arguments": [],
    "category": "AEAD encryption functions",
    "return_type": "STRUCT",
    "description": "Can be used in place of the keyset argument to the AEAD\nand deterministic encryption \nfunctions to pass a keyset that is encrypted with a Cloud KMS key. This\nlets you use AEAD functions without including plaintext keys in a query.kms_resource_name is a STRING value that contains the resource path to the\nCloud KMS key used to decrypt first_level_keyset. The full string\nmust begin with gcp-kms:// and be in the following format:\ngcp-kms://projects/{id}/locations/{location}/keyRings/{id}/cryptoKeys/{id}.\nThe Cloud KMS key must reside in the same Cloud region as the query.first_level_keyset is a BYTES value containing the ciphertext produced by\nencrypting a serialized Tink keyset with the specified KMS key.Both kms_resource_name and first_level_keyset must be constant values."
  },
  {
    "name": "KEYS.KEYSET_FROM_JSON",
    "arguments": [],
    "category": "AEAD encryption functions",
    "return_type": "BYTES",
    "description": "Returns the input json_keyset STRING as\nserialized BYTES, which is a valid input for other\nKEYS and AEAD functions. The JSON STRING must\nbe compatible with the definition of the\ngoogle.crypto.tink.Keyset\nprotocol buffer message: the JSON keyset should be a JSON object containing\nobjects and name-value pairs corresponding to those in the \"keyset\" message in\nthe google.crypto.tink.Keyset definition. You can convert the output serialized\nBYTES representation back to a JSON\nSTRING using KEYS.KEYSET_TO_JSON."
  },
  {
    "name": "KEYS.KEYSET_TO_JSON",
    "arguments": [],
    "category": "AEAD encryption functions",
    "return_type": "STRING",
    "description": "Returns a JSON STRING representation of the input\nkeyset. The returned JSON STRING is compatible\nwith the definition of the\ngoogle.crypto.tink.Keyset\nprotocol buffer message. You can convert the JSON\nSTRING representation back to\nBYTES using KEYS.KEYSET_FROM_JSON."
  },
  {
    "name": "KEYS.ROTATE_KEYSET",
    "arguments": [],
    "category": "AEAD encryption functions",
    "return_type": "BYTES",
    "description": "Adds a new key to keyset based on key_type. This new key becomes the primary\ncryptographic key of the new keyset. Returns the new keyset serialized as\nBYTES.The old primary cryptographic key from the input keyset remains an additional\nkey in the returned keyset.The new key_type must match the key type of existing keys in the keyset."
  },
  {
    "name": "KEYS.KEYSET_LENGTH",
    "arguments": [],
    "category": "AEAD encryption functions",
    "return_type": "INT64",
    "description": "Returns the number of keys in the provided keyset."
  }
]